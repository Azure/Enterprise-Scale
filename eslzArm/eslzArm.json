{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "enterpriseScaleCompanyPrefix": {
            "type": "string",
            "maxLength": 10,
            "metadata": {
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale.",
                "designArea": "Resource organization"
            }
        },
        "singlePlatformSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for single platform.",
                "designArea": "Azure billing offers and Microsoft Entra ID tenants"
            }
        },
        "enablePrivateSubnet": {
            "type": "string",
            "defaultValue": "Audit",
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "metadata": {
                "description": "",
                "designArea": ""
            }
        },
        "telemetryOptOut": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "The customer usage identifier used for telemetry purposes. The default value of 'No' enables telemetry. The value of 'Yes' disables telemetry.",
                "designArea": "Resource organization"
            }
        },
        "enableLogAnalytics": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected Log Analytics will be deployed to your environment for collecting of logs from resources deployed within your Azure environemnt and is recommended by default. If 'No', it will be ignored.",
                "designArea": "Governance"
            }
        },
        "laCategory": {
            "type": "string",
            "defaultValue": "allLogs",
            "allowedValues": [
                "allLogs",
                "auditLogs"
            ],
            "metadata": {
                "description": "The selection will determine the category of diagnostic settings logs that will be forwarded to Log Analytics. NOTE: All logs is recommended for full visibility. Audit log category is limited to Azure services that support this category.",
                "designArea": "Governance"
            }
        },
        "retentionInDays": {
            "type": "string",
            "defaultValue": "30",
            "metadata": {
                "description": "Specify the retention period in days for the Log Analytics workspace. Default is 30 days (free retention period). If you are also deploying Microsoft Sentinel, change this to 90 days (free retention for Sentinel).",
                "designArea": "Governance"
            }
        },
        "enableSentinel": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected Sentinel will be enabled on the Log Analytics workspace. Note additional configuration is required to complete Sentinel onboarding. If 'No', it will not be enabled.",
                "designArea": "Governance"
            }
        },
        "managementSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for management. If you don't want to bring a subscription, leave this parameter empty as is.",
                "designArea": "Azure billing offers and Microsoft Entra ID tenants"
            }
        },
        "enableChangeTracking": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Change Tracking and Inventory allows monitoring of changes to Windows registry keys.",
                "designArea": "Governance"
            }
        },
        "enableUpdateMgmt": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes",
            "metadata": {
                "description": "Azure Update Manager is a unified service to help manage and govern updates for all your machines.",
                "designArea": "Governance"
            }
        },
        "enableVmInsights": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes",
            "metadata": {
                "description": "VM insights provides a set of predefined workbooks that allow you to view trending of collected performance data over time",
                "designArea": "Governance"
            }
        },
        "enableAsc": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Selecting 'Yes' will enable the options to configure individual Microsoft Defender for Cloud components, and will enable Microsoft Defender for Cloud plans on all subscriptions in the Azure Landing Zone",
                "designArea": "Security"            
            }
        },
        "emailContactAsc": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Email address for Microsoft Defender for Cloud contact details.",
                "designArea": "Security"    
            }
        },
        "enableAscForServers": {
            "type": "string",
            "defaultValue": "Disabled",
            "allowedValues": [
                "DeployIfNotExists",
                "Disabled"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for all servers",
                "designArea": "Security"    
            }
        },
        "enableAscForServersVulnerabilityAssessments": {
            "type": "string",
            "defaultValue": "Disabled",
            "allowedValues": [
                "DeployIfNotExists",
                "Disabled"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud for servers vulnerability assessments will be enabled for all servers.",
                "designArea": "Security"    
            }
        },
        "enableAscForOssDb": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for open-source relational databases.",
                "designArea": "Security"    
            }
        },
        "enableAscForCosmosDbs": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for Cosmos DB",
                "designArea": "Security"    
            }
        },
        "enableAscForAppServices": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for AppServices",
                "designArea": "Security"    
            }
        },
        "enableAscForStorage": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for Storage",
                "designArea": "Security"    
            }
        },
        "enableAscForSql": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for Azure SQL Database",
                "designArea": "Security"    
            }
        },
        "enableAscForSqlOnVm": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for SQL servers on virtual machines",
                "designArea": "Security"    
            }
        },
        "enableAscForKeyVault": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for Key Vault",
                "designArea": "Security"    
            }
        },
        "enableAscForArm": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for Resource Manager",
                "designArea": "Security"    
            }
        },
        "enableAscForApis": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for APIs",
                "designArea": "Security"    
            }
        },
        "enableAscForCspm": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender CSPM will be enabled",
                "designArea": "Security"    
            }
        },
        "enableAscForContainers": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Cloud will be enabled for Containers (Kubernetes and Container Registries)",
                "designArea": "Security"    
            }
        },
        "enableMDEndpoints": {
            "type": "string",
            "allowedValues": [
                "Disabled",
                "DeployIfNotExists",
                "AuditIfNotExists"
            ],
            "defaultValue": "Disabled",
            "metadata": {
                "description": "If 'Yes' is selected, Microsoft Defender for Endpoints will be deployed to supported virtual machines. You may want to disable this if you are using a third-party endpoint protection solution",
                "designArea": "Security"    
            }
        },
        "enableSecuritySolution": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableServiceHealth": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Service Health initiative is assigned to the Intermediate root management group. This will ensure that new subscriptions created within that scope are configured to monitor Service Health Events such as Service issues, Planned maintenance, Health advisories, Security advisories, and Resource health. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring",
                "designRecommendation": "Enabling Azure Service Health alerts is highly recommended regardless of the size, type, or location of your organization. These alerts provide notifications about service issues, planned maintenance, and health advisories, which can help you: Receive updates about the health of your Azure services; Quickly respond to service disruptions or outages; Be informed about planned maintenance activities; Stay updated on security advisories."
            }
        },
        "enableMonitorBaselines": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "maxLength": 36,
            "metadata": {
                "description": "If 'Yes' is selected Azure Monitor Baseline Alerts can be enabled for the selected resources. Note that choosing 'Yes'  will import all Azure Monitor Baseline Alerts policy definitions into your environment. If 'No', Azure Monitor Baseline Alerts policy definitions will not be deployed.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableMonitorConnectivity": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "maxLength": 36,
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Connectivity policy initiative is assigned to the Connectivity management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableMonitorIdentity": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "maxLength": 36,
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Identity policy initiative is assigned to the Identity management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableMonitorManagement": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "maxLength": 36,
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Management policy initiative is assigned to the Management management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "monitorAlertsResourceGroup": {
            "type": "string",
            "defaultValue": "rg-amba-prod-001",
            "maxLength": 90,
            "metadata": {
                "description": "Resource group for activity log alerts and action groups for Azure Monitor Baseline Alerts. Will be created in all subscriptions in scope for the policy",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "userAssignedManagedIdentityName": {
            "type": "string",
            "defaultValue": "id-amba-prod-001",
            "maxLength": 90,
            "metadata": {
                "description": "Specify the name of the user assigned managed identity for monitoring purpose.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "ambaAgEmailContact": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Email address for action group notifications.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "ambaAgServiceHook": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Service Hook URI for action group notifications.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "ambaAgArmRole": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "ARM roles for action group notifications.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableAMBAHybridVM": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Hybrid VMs policy initiative is assigned to the Landing Zones management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableAMBAKeyManagement": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Key Management policy initiative is assigned to the Landing Zones management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableAMBALoadBalancing": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Load Balancing policy initiative is assigned to the Landing Zones management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableAMBANetworkChanges": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Changes in Network Routing and Security policy initiative is assigned to the Landing Zones management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableAMBARecoveryServices": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Recovery Services policy initiative is assigned to the Landing Zones management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableAMBAStorage": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Storage policy initiative is assigned to the Landing Zones management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableAMBAVM": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Virtual Machines policy initiative is assigned to the Landing Zones management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "enableAMBAWeb": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected the Deploy Azure Monitor Baseline Alerts for Web policy initiative is assigned to the Landing Zones management group. This will ensure that relevant new resources created within that scope are configured with appropriate baseline alerts. If 'No', the initiative will not be assigned.",
                "designArea": "Baseline alerts and monitoring"
            }
        },
        "connectivitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for networking.",
                "designArea": "Networking"
            }
        },
        "addressPrefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Provide address prefix in CIDR notation (e.g 10.100.0.0/16)",
                "designArea": "Networking"
            }
        },
        "connectivityLocation": {
            "type": "string",
            "defaultValue": "[deployment().location]",
            "metadata": {
                "description": "Select the target region for your connectivity deployment (requires you to provide a subscriptionId for connectivity)",
                "designArea": "Networking"
            }
        },
        "enableDdoS": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a connectivity subscription, DDoS Network Protection will be enabled on the connectivity virtual network. Please note that DDoS Network Protection does incur additional costs that need to be considered",
                "designArea": "Networking"
            }
        },
        "enablePrivateDnsZones": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for connectivity, ARM will create Private DNS Zones for Azure PaaS services selected",
                "designArea": "Networking"
            }
        },
        "privateDnsZonesToDeploy": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Select each Private DNS Zone to create which will offer DNS integration with Azure PaaS services where you enable private endpoints",
                "designArea": "Networking"
            }
        },
        "enableVpnGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for connectivity, ARM will deploy VPN gateway",
                "designArea": "Networking"
            }
        },
        "enableVpnActiveActive": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Deploy the VPN gateway in Active/Active mode",
                "designArea": "Networking"
            }
        },
        "gwRegionalOrAz": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "If 'Yes' is selected Virtual Gateway will be deployed to the selected region and availability zones",
                "designArea": "Networking"
            }
        },
        "gwRegionalSku": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Select the required SKU for the VPN gateway",
                "designArea": "Networking"
            }
        },
        "gwAzSku": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Select the required SKU for the VPN gateway where Availability Zones are selected",
                "designArea": "Networking"
            }
        },
        "vpnGateWayScaleUnit": {
            "type": "string",
            "defaultValue": "1",
            "metadata": {
                "description": "Select the Virtual WAN VPN Gateway scale unit",
                "designArea": "Networking"
            }
        },
        "subnetMaskForGw": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Assign 10.100.1.0/24 IP Address for ExpressRoute Gateway",
                "designArea": "Network topology and connectivity"
            }
        },
        "enableErGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, an ExpressRoute Gateway is deployed",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Use ExpressRoute as the primary connectivity between on-premises network and Azure"
            }
        },
        "erAzSku": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Provide the Stock Keeping Unit to use for the required resource",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select the correct SKU for the Availability Zone"
            }
        },
        "erRegionalSku": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Provide the Stock Keeping Unit to use for the required Azure Region",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select the correct SKU for the Region"
            }
        },
        "erRegionalOrAz": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Deploy zone redundant or regional ExpressRoute Gateway",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select zone redundant SKU"
            }
        },
        "expressRouteScaleUnit": {
            "type": "string",
            "defaultValue": "1",
            "metadata": {
                "description": "Select the ExpressRoute scale unit",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select the correct scale unit"
            }
        },
        "enableHub": {
            "type": "string",
            "allowedValues": [
                "vhub",
                "vwan",
                "nva",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "Select either Hub and spoke with Azure Firewall, Hub and spoke with your own third-party NVA or Virtual WAN (microsoft managed)",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select the appropriate Hub and spoke"
            }
        },
        "enableAzFw": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "if yes deploy Azure Firewall",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select the appropriate Hub and spoke"
            }
        },
        "enableAzFwDnsProxy": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "if yes enable Azure Firewall as Proxy",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select this option if need it"
            }
        },
        "firewallSku": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Deploy Azure Firewall",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select this appropriate SKU,the default is Premium"
            }
        },
        "firewallZones": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Select Availability Zones for Azure Firewall",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select 3"
            }
        },
        "subnetMaskForAzFw": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Deploy Subnet for Azure Firewall",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "deploy 10.100.0.0/24"
            }
        },
        "subnetMaskForAzFwMgmt": {
            "type": "string",
            "defaultValue": ""
        },
        "enablevWANRoutingIntent": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "Select yes if you want to enable secure VNet traffic",
                "designArea": "Network topology and connectivity"
            }
        },
        "internetTrafficRoutingPolicy": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable vWAN Routing Intent and Policy for Internet Traffic",
                "designArea": "Network topology and connectivity"
            }
        },
        "privateTrafficRoutingPolicy": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable vWAN Routing Intent and Policy for Private Traffic",
                "designArea": "Network topology and connectivity"
            }
        },
        "vWANHubRoutingPreference": {
            "type": "string",
            "defaultValue": "ExpressRoute",
            "metadata": {
                "description": "vWAN Hub Routing Preference",
                "designArea": "Network topology and connectivity"
            }
        },
        "vWANHubCapacity": {
            "type": "string",
            "defaultValue": "2",
            "metadata": {
                "description": "vWAN Hub Capacity",
                "designArea": "Network topology and connectivity"
            }
        },
        "addressPrefixSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Address space for your second virtual hub",
                "designArea": "Network topology and connectivity"
            }
        },
        "connectivityLocationSecondary": {
            "type": "string",
            "defaultValue": "[deployment().location]",
            "metadata": {
                "description": "location for your second virtual hub",
                "designArea": "Network topology and connectivity"
            }
        },
        "enablePrivateDnsZonesSecondary": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "if yes enable Private DNSZone for your second virtual hub",
                "designArea": "Network topology and connectivity"
            }
        },
        "privateDnsZonesToDeploySecondary": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "if yes enable Private DNSZone for your second virtual hub",
                "designArea": "Network topology and connectivity"
            }
        },
        "enableVpnGwSecondary": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "if yes enable VPN Gateway on the secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "enableVpnActiveActiveSecondary": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "if yes enable VPN ActiveActive in your second region",
                "designArea": "Network topology and connectivity"
            }
        },
        "gwRegionalOrAzSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "if yes enable VPN zonal or AZ your second region",
                "designArea": "Network topology and connectivity"
            }
        },
        "gwRegionalSkuSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "if yes enable VPN regional SKU in your second region",
                "designArea": "Network topology and connectivity"
            }
        },
        "gwAzSkuSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "if yes enable VPN regional SKU in your second region",
                "designArea": "Network topology and connectivity"
            }
        },
        "vpnGateWayScaleUnitSecondary": {
            "type": "string",
            "defaultValue": "1",
            "metadata": {
                "description": "enable scale unit to 1 SKU in secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "subnetMaskForGwSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "assign 10.200.1.0/24 in secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "enableErGwSecondary": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Deploy ExpressRoute Gateway in secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "erAzSkuSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Deploy ExpressRoute Gateway SKU in secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "erRegionalSkuSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Deploy ExpressRoute regional SKU in secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "erRegionalOrAzSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Deploy ExpressRoute Regional SKU or AZ SKU in secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "expressRouteScaleUnitSecondary": {
            "type": "string",
            "defaultValue": "1",
            "metadata": {
                "description": "Deploy ExpressRoute scale unit in secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "enableSecondaryRegion": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes",
            "metadata": {
                "description": "if yes enable secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "enableHubSecondary": {
            "type": "string",
            "allowedValues": [
                "vhub",
                "vwan",
                "nva",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "Select either Hub and spoke with Azure Firewall, Hub and spoke with your own third-party NVA or Virtual WAN (microsoft managed)in secondary region",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "Select the appropriate Hub and spoke"
            }
        },
        "enableAzFwSecondary": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "if yes enable Azure Firewall in secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "enableAzFwDnsProxySecondary": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "if yes enable Azure Firewall DNS proxy in secondary region",
                "designArea": "Network topology and connectivity"
            }
        },
        "firewallSkuSecondary": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Select from the Basic, Standard, or Premium Tier for Azure Firewall. Choose the appropriate SKU for Azure Firewall based on the required features, such as IPDS, URL filtering, web categories, and TLS inspection.",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "It is recommended to use the Premium SKU to access important features such as IPDS, URL filtering, web categorization, and TLS inspection."
            }
        },
        "firewallZonesSecondary": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Select one or more Availability Zones (1, 2, 3) for deploying Azure Firewall in your secondary region.",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "It is recommended to select all three zones for increased availability."
            }
        },
        "subnetMaskForAzFwSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Provide address prefix in CIDR notation (e.g 10.200.0.0/24)",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "To ensure ease of use and accommodate future growth, the default address space is set to 10.200.0.0/24. However, a /26 address space is sufficient for Azure Firewall to meet current scaling requirements."
            }
        },
        "subnetMaskForAzFwMgmtSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Provide address prefix in CIDR notation (e.g 10.200.2.0/24)",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "To ensure ease of use and accommodate future growth, the default address space is set to 10.200.2.0/24. However, a /26 address space is sufficient for Azure Firewall Management Subnet."
            }
        },
        "enablevWANRoutingIntentSecondary": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "Select 'Yes' if you want to enable secure VNet traffic",
                "designArea": "Network topology and connectivity",
                "designRecommendation": ""
            }
        },
        "internetTrafficRoutingPolicySecondary": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable vWAN Routing Intent and Policy for Internet Traffic",
                "designArea": "Network topology and connectivity",
                "designRecommendation": ""
            }
        },
        "privateTrafficRoutingPolicySecondary": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable vWAN Routing Intent and Policy for Private Traffic",
                "designArea": "Network topology and connectivity",
                "designRecommendation": ""
            }
        },
        "vWANHubRoutingPreferenceSecondary": {
            "type": "string",
            "defaultValue": "ExpressRoute",
            "metadata": {
                "description": "Routing preference used in selecting best path when the virtual hub learns multiple paths to the same destination route-prefix",
                "designArea": "Network topology and connectivity",
                "designRecommendation": ""
            }
        },
        "vWANHubCapacitySecondary": {
            "type": "string",
            "defaultValue": "2",
            "metadata": {
                "description": "Routing infrastructure units determine the minimum throughput of the Virtual WAN hub router and the number of Virtual Machines that can be deployed in Virtual Networks connected to the Virtual WAN hub. Two routing infrastructure units are included at no extra cost with a deployment of a hub",
                "designArea": "Network topology and connectivity",
                "designRecommendation": ""
            }
        },
        "identitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for identity.",
                "designArea": "Azure billing offers and Microsoft Entra ID tenants"
            }
        },
        "denyMgmtPortsForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Management port access from the Internet should be blocked' policy is assigned to the Identity management group. This policy denies any network security rule that allows management port access from the Internet, by default blocking SSH/RDP ports. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": "Denying management port access from the Internet is highly recommended regardless of the size, type, or location of your organization. This will help guard against misconfigurations that could inadvertently permit remote access."
            }
        },
        "denySubnetWithoutNsgForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Subnets should have a Network Security Group' policy is assigned to the Identity management group. This policy denies the creation of a subnet without a Network Security Group. NSG help to protect traffic across subnet-level. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": "It is recommended to deny the creation of subnets without Network Security Groups, regardless of your organization's size, type, or location. This enhances subnet-level traffic protection."
            }
        },
        "denyPipForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Not allowed resource types' policy is assigned to the Identity management group. This policy denies the creation of public IP addresses. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enableVmBackupForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Configure backup on virtual machines without a given tag to a new recovery services vault with a default policy' policy is assigned to the Identity management group. This policy enforces backup for all virtual machines. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "identityAddressPrefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Provide address prefix in CIDR notation (e.g 10.110.0.0/24)",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "The default address space is configured to 10.110.0.0/24, which is generally adequate for initial deployment in most environments. Additional address space can be allocated as needed."
            }
        },
        "identityAddressPrefixSecondary": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Provide address prefix in CIDR notation (e.g 10.210.0.0/24)",
                "designArea": "Network topology and connectivity",
                "designRecommendation": "The default address space is configured to 10.210.0.0/24, which is generally adequate for initial deployment in most environments. Additional address space can be allocated as needed."
            }
        },
        "corpConnectedLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones and connect to virtual networking hub.",
                "designArea": "Azure billing offers and Microsoft Entra ID tenants"
            }
        },
        "corpLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones.",
                "designArea": "Azure billing offers and Microsoft Entra ID tenants"
            }
        },
        "onlineLzSubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first online landing zones.",
                "designArea": "Azure billing offers and Microsoft Entra ID tenants"
            }
        },
        "enableLzDdoS": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Virtual networks should be protected by Azure DDoS Protection' policy is assigned to the Landing Zone management group. This will ensure that virtual networks have Azure DDoS Protection enabled to help safeguard against volumetric and protocol attacks. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": "Enabling Azure DDoS Protection is highly recommended regardless of the size, type, or location of your organization. This will help guard against volumetric and protocol attacks."
            }
        },
        "denyPublicEndpoints": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Public network access should be disabled for PaaS services' policy is assigned to the Corp Landing Zone management group. This will prevent PaaS resources to use public endpoints. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "denyPipOnNicForCorp": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Network interfaces should not have public IPs' policy is assigned to the Corp management group. This policy denies the network interfaces which are configured with any public IP. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enablePrivateDnsZonesForLzs": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Audit or Deny the creation of Private Link Private DNS Zones' policy is assigned to the Corp management group. This policy Audits the deployment of Private Link Private DNS Zone resources in the Corp landing zone. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enableEncryptionInTransit": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Deny or Deploy and append TLS requirements and SSL enforcement on resources without Encryption in transit' policy is assigned to the Landing Zone management group. This policy will ensure that PaaS resources use TLS and SSL. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enableVmMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Enable Azure Monitor for VMs with Azure Monitoring Agent(AMA)' policy is assigned to the Landing Zone management group. This policy enables Azure Monitor for virtual machines with AMA. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enableVmssMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Enable Azure Monitor for VMSS with Azure Monitoring Agent(AMA)' policy is assigned to the Landing Zone management group. This policy enables Azure Monitor for virtual machines scale sets with AMA. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enableVmHybridMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Enable Azure Monitor for Hybrid VMs with AMA' policy is assigned to the Landing Zone management group. This policy enables Azure Monitor for hybrid virtual machines with AMA. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "denyAksPrivileged": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Kubernetes cluster should not allow privileged containers' policy is assigned to the Landing Zone management group. This policy prevents privileged containers creation in a Kubernetes cluster. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "denyAksPrivilegedEscalation": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Kubernetes clusters should not allow container privilege escalation' policy is assigned to the Landing Zone management group. This policy prevents containers from running with privilege escalation to root in a Kubernetes cluster. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "denyClassicResources": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Not allowed resource types' policy is assigned to the Landing Zone management group. This policy will prevent deployment of all classic resources. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "denyVMUnmanagedDisk": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Audit VMs that do not use managed disks' policy is assigned to the Landing Zone management group. This policy is assigned using a Deny override and will prevent deployment of virtual machines and virtual machine scales sets with unmanaged disks. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "denyHttpIngressForAks": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Kubernetes clusters should be accessible only over HTTPS' policy is assigned to the Landing Zone management group. This policy enforces the use of HTTPS, which ensures authentication and protects data in transit from network layer eavesdropping attacks. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enableVmBackup": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Configure backup on virtual machines without a given tag to a new recovery services vault with a default policy' policy is assigned to the Landing Zone management group. This policy enforces backup for all virtual machines. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "denyMgmtPorts": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Management port access from the Internet should be blocked' policy is assigned to the Landing Zone management group. This policy denies any network security rule that allows management port access from the Internet, by default blocking SSH/RDP ports. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": "Denying management port access from the Internet is highly recommended regardless of the size, type, or location of your organization. This will help guard against misconfigurations that could inadvertently permit remote access."
            }
        },
        "denySubnetWithoutNsg": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Subnets should have a Network Security Group' policy is assigned to the Landing Zone management group. This policy denies the creation of a subnet without a Network Security Group. NSG help to protect traffic across subnet-level. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": "It is recommended to deny the creation of subnets without Network Security Groups, regardless of your organization's size, type, or location. This enhances subnet-level traffic protection."
            }
        },
        "denyIpForwarding": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Network interfaces should disable IP forwarding' policy is assigned to the Landing Zone management group. This policy denies the network interfaces which enabled IP forwarding. The setting of IP forwarding disables Azure's check of the source and destination for a network interface. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enableSqlEncryption": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Deploy SQL DB transparent data encryption' policy is assigned to the Landing Zone management group. This enables transparent data encryption on SQL databases. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": "It is recommended to enable transparent data encryption, regardless of the size, type, or location of your organization. This ensures that data is encrypted at rest."
            }
        },
        "enableSqlThreat": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the 'Configure Azure Defender to be enabled on SQL servers' policy is assigned to the Landing Zone management group. This will ensure that Azure Defender is enabled on your Azure SQL Servers. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": "It is recommended to enable Azure Defender on your Azure SQL Servers to help detect anomalous activities that may indicate unusual and potentially harmful attempts to access or exploit databases."
            }
        },
        "enableDecommissioned": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce policies in the Decommissioned Landing Zone initiative is assigned to the Decommissioned Landing Zone management group. This will ensure that subscriptions within that scope are configured to block the provisioning of additional resources and to shutdown any running virtual machines. If 'No', the initiative will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enableSandbox": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce policies in the Sandbox Landing Zone initiative is assigned to the Sandboxes Landing Zone management group. This will ensure that subscriptions within that scope are configured to block the provisioning of network connectivity components (VWAN, ER/VPN Gateway) and cross-subscription virtual network peering. If 'No', the initiative will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": "Sandboxes are intended as a experimental space inherently less secure than production environments. It is recommended to restrict network connectivity components and cross-subscription virtual network peering in this environment."
            }
        },
        "enableSqlAudit": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Configure SQL servers to have auditing enabled to Log Analytics workspace policy is assigned to the Landing Zone management group. To ensure the operations performed against your SQL assets are captured, SQL servers should have auditing enabled. If auditing is not enabled, this policy will configure auditing events to flow to the specified Log Analytics workspace. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Governance",
                "designRecommendation": ""
            }
        },
        "enableStorageHttps": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Secure transfer to storage accounts should be enabled policy is assigned to the Landing Zone management group. Audit requirement of Secure transfer in your storage account. Secure transfer is an option that forces your storage account to accept requests only from secure connections (HTTPS). Use of HTTPS ensures authentication between the server and the service and protects data in transit from network layer attacks such as man-in-the-middle, eavesdropping, and session-hijacking. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Security",
                "designRecommendation": ""
            }
        },
        "enforceKvGuardrails": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Azure Key Vault initiative is assigned to the Landing Zone management group. Key Vault plays a crucial role in securing cloud services managing keys, certificates and secrets. This initiative enforces best practices and recommendations for Key Vault improving security and protection of the service. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the initiative will not be assigned.",
                "designArea": "Security",
                "designRecommendation": ""
            }
        },
        "enforceBackup": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce enhanced recovery and backup policies initiative is assigned to the Landing Zone management group. This is an audit only initiative that reviews if immutability, multi-user authentication and soft-delete features are enabled on Backup and Recovery Services vaults, which help protect from accidental delete or malicious compromise of data. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the initiative will not be assigned.",
                "designArea": "Security",
                "designRecommendation": ""
            }
        },
        "enforceKvGuardrailsPlat": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Azure Key Vault initiative is assigned to the Platform management group. Key Vault plays a crucial role in securing cloud services managing keys, certificates and secrets. This initiative enforces best practices and recommendations for Key Vault improving security and protection of the service. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the initiative will not be assigned.",
                "designArea": "Security",
                "designRecommendation": ""
            }
        },
        "enforceBackupPlat": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce enhanced recovery and backup policies initiative is assigned to the Platform management group. This is an audit only initiative that reviews if immutability, multi-user authentication and soft-delete features are enabled on Backup and Recovery Services vaults, which help protect from accidental delete or malicious compromise of data. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the initiative will not be assigned.",
                "designArea": "Security",
                "designRecommendation": ""
            }
        },
        "denyHybridNetworking": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Not allowed resource types policy is assigned to the Corp management group. This will prevent the provisioning of VPN and Express Route Gateways in the Corp landing zone, compromising the security of workloads that should use the Connectivity hub for on-premises access. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Networking",
                "designRecommendation": ""
            }
        },
        "auditPeDnsZones": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Audit or Deny the creation of Private Link Private DNS Zones policy is assigned to the Corp management group. For ALZ this will Audit subscriptions in the Corp management group for Private DNS Zones that should only exist in the Connectivity hub. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Networking",
                "designRecommendation": ""
            }
        },
        "auditAppGwWaf": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Web Application Firewall (WAF) should be enabled for Application Gateway policy is assigned to the Landing Zone management group. Deploy Azure Web Application Firewall (WAF) in front of public facing web applications for additional inspection of incoming traffic. Web Application Firewall (WAF) provides centralized protection of your web applications from common exploits and vulnerabilities such as SQL injections, Cross-Site Scripting, local and remote file executions. You can also restrict access to your web applications by countries, IP address ranges, and other http(s) parameters via custom rules. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the policy will not be assigned.",
                "designArea": "Networking",
                "designRecommendation": ""
            }
        },
        "enforceAcsb": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "Audit",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce Azure Compute Security Benchmark compliance auditing initiative is assigned to the Intermediate Root management group. Audits the compliance of Windows and Linux virtual machines against the Azure Compute Security Benchmark. If 'Audit', the policy will not be enforced, only compliance will be audited. If 'No', the initiative will not be assigned.",
                "designArea": "Security",
                "designRecommendation": ""
            }
        },
        "delayCount": {
            "type": "int",
            "defaultValue": 55,
            "minValue": 1,
            "maxValue": 60,
            "metadata": {
                "description": "Not user configurable, or intended to be changed. Managed by the ALZ team. Configure the count of empty deployments used to introduce a delay after policy deployment. Used to increase reliability of deployment, but can be reduced when re-deploying to an existing environment."
            }
        },
        "currentDateTimeUtcNow": {
            "type": "string",
            "defaultValue": "[utcNow()]",
            "metadata": {
                "description": "Not user configurable, or intended to be changed. Managed by the ALZ team. The current date and time using the utcNow function. Used for deployment name uniqueness."
            }
        },
        "enableWsCMKInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Deny or Audit resources without Encryption with a customer-managed key (CMK) initiative is assigned to the selected management group(s) - determined by parameter wsCMKSelectorMG. Denies the provisioning of resources that do not have customer managed keys enabled. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": "Highly regulated industries may require the use of customer-managed keys to encrypt data at rest. This initiative ensures that resources are encrypted with customer-managed keys."
            }
        },
        "wsCMKSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Customer-Managed Keys."
            }
        },
        "enableWsAPIMInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for API Management initiative is assigned to the selected management group(s) - determined by parameter wsAPIMSelectorMG. Enforces best practice principals for API Management resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": "API Management is a critical component for managing APIs and services. This initiative ensures that API Management resources are configured with best practices."
            }
        },
        "wsAPIMSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for API Management."
            }
        },
        "enableWsAppServicesInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for App Services initiative is assigned to the selected management group(s) - determined by parameter wsAppServicesSelectorMG. Enforces best practice principals for App Services resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": "App Services is a critical component for hosting web applications and other services that rely on App Services (e.g. Functions). This initiative ensures that App Services resources are configured with best practices."
            }
        },
        "wsAppServicesSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for App Services."
            }
        },
        "enableWsAutomationInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Automation Accounts initiative is assigned to the selected management group(s) - determined by parameter wsAutomationSelectorMG. Enforces best practice principals for Automation Accounts resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsAutomationSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Automation Accounts."
            }
        },
        "enableWsBotServiceInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for AI Bot Service initiative is assigned to the selected management group(s) - determined by parameter wsBotServiceSelectorMG. Enforces best practice principals for AI Bot Service resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsBotServiceSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Automation Accounts."
            }
        },
        "enableWsCognitiveServicesInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for AI Search initiative is assigned to the selected management group(s) - determined by parameter wsCognitiveServicesSelectorMG. Enforces best practice principals for AI Search resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsCognitiveServicesSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Cognitive Services."
            }
        },
        "enableWsComputeInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Compute initiative is assigned to the selected management group(s) - determined by parameter wsComputeSelectorMG. Enforces best practice principals for Compute resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsComputeSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Compute."
            }
        },
        "enableWsContainerAppsInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Container Apps initiative is assigned to the selected management group(s) - determined by parameter wsContainerAppsSelectorMG. Enforces best practice principals for Container Apps resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsContainerAppsSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Container Apps."
            }
        },
        "enableWsContainerInstanceInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Container Instance initiative is assigned to the selected management group(s) - determined by parameter wsContainerInstanceSelectorMG. Enforces best practice principals for Container Instance resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsContainerInstanceSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Container Instance."
            }
        },
        "enableWsContainerRegistryInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Container Registry initiative is assigned to the selected management group(s) - determined by parameter wsContainerRegistrySelectorMG. Enforces best practice principals for Container Registry resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsContainerRegistrySelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Container Registry."
            }
        },
        "enableWsCosmosDbInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Cosmos DB initiative is assigned to the selected management group(s) - determined by parameter wsCosmosDbSelectorMG. Enforces best practice principals for Cosmos DB resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsCosmosDbSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Cosmos DB."
            }
        },
        "enableWsDataExplorerInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Data Explorer initiative is assigned to the selected management group(s) - determined by parameter wsDataExplorerSelectorMG. Enforces best practice principals for Data Explorer resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsDataExplorerSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Data Explorer."
            }
        },
        "enableWsDataFactoryInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Data Factory initiative is assigned to the selected management group(s) - determined by parameter wsDataFactorySelectorMG. Enforces best practice principals for Data Factory resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsDataFactorySelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Data Factory."
            }
        },
        "enableWsEventGridInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Event Grid initiative is assigned to the selected management group(s) - determined by parameter wsEventGridSelectorMG. Enforces best practice principals for Event Grid resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsEventGridSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Event Grid."
            }
        },
        "enableWsEventHubInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Event Hub initiative is assigned to the selected management group(s) - determined by parameter wsEventHubSelectorMG. Enforces best practice principals for Event Hub resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsEventHubSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Event Hub."
            }
        },
        "enableWsKeyVaultSupInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Key Vault - Supplementary initiative is assigned to the selected management group(s) - determined by parameter wsKeyVaultSupSelectorMG. Enforces additional best practice principals for Key Vault resources, typically required by highly regulated industries. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsKeyVaultSupSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Key Vault."
            }
        },
        "enableWsKubernetesInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Kubernetes initiative is assigned to the selected management group(s) - determined by parameter wsKubernetesSelectorMG. Enforces best practice principals for Kubernetes resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsKubernetesSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Kubernetes."
            }
        },
        "enableWsMachineLearningInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Machine Learning initiative is assigned to the selected management group(s) - determined by parameter wsMachineLearningSelectorMG. Enforces best practice principals for Machine Learning resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsMachineLearningSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Machine Learning."
            }
        },
        "enableWsMySQLInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for MySQL initiative is assigned to the selected management group(s) - determined by parameter wsMySQLSelectorMG. Enforces best practice principals for Azure Database for MySQL resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsMySQLSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for MySQL."
            }
        },
        "enableWsNetworkInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Network and Networking services initiative is assigned to the selected management group(s) - determined by parameter wsNetworkSelectorMG. Enforces additional best practice principals for Network and Networking services resources typically required for highly regulated industries. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsNetworkSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Network and Networking services."
            }
        },
        "enableWsOpenAIInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for OpenAI initiative is assigned to the selected management group(s) - determined by parameter wsOpenAISelectorMG. Enforces best practice principals for Azure OpenAI resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsOpenAISelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Open AI."
            }
        },
        "enableWsPostgreSQLInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for PostgreSQL initiative is assigned to the selected management group(s) - determined by parameter wsPostgreSQLSelectorMG. Enforces best practice principals for Azure Database for PostgreSQL resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsPostgreSQLSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for PostgreSQL."
            }
        },
        "enableWsServiceBusInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Service Bus initiative is assigned to the selected management group(s) - determined by parameter wsServiceBusSelectorMG. Enforces best practice principals for Service Bus resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsServiceBusSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Service Bus."
            }
        },
        "enableWsSQLInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for SQL initiative is assigned to the selected management group(s) - determined by parameter wsSQLSelectorMG. Enforces best practice principals for Azure SQL resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsSQLSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for SQL."
            }
        },
        "enableWsStorageInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Storage initiative is assigned to the selected management group(s) - determined by parameter wsStorageSelectorMG. Enforces best practice principals for Storage resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsStorageSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Storage."
            }
        },
        "enableWsSynapseInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Synapse initiative is assigned to the selected management group(s) - determined by parameter wsSynapseSelectorMG. Enforces best practice principals for Synapse resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsSynapseSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Synapse."
            }
        },
        "enableWsVirtualDesktopInitiatives": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "If 'Yes' (default) is selected the Enforce recommended guardrails for Virtual Desktop initiative is assigned to the selected management group(s) - determined by parameter wsVirtualDesktopSelectorMG. Enforces best practice principals for Azure Virtual Desktop resources. If 'No', the initiative will not be assigned.",
                "designArea": "Workload Specific Compliance",
                "designRecommendation": ""
            }
        },
        "wsVirtualDesktopSelectorMG": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of management groups to assign the Workload Specific Compliance initiative for Virtual Desktop."
            }
        },
        "regulatoryComplianceInitativesToAssign": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of objects containing built-in Regulatory Compliance policies to assign to specified Management Groups."
            }
        },
        "regCompPolParAusGovIsmRestrictedVmAdminsExclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Australian Government ISM PROTECTED - Required Policy Initative Parameters: List of users that must be excluded in Windows VM Administrators group. A semicolon-separated list of users that should be excluded in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParAusGovIsmRestrictedResourceTypes": {
            "type": "string",
            "defaultValue": "all",
            "metadata": {
                "description": "Australian Government ISM PROTECTED - Required Policy Initative Parameters: List of resource types that should have diagnostic logging enabled. If 'all' (default) is selected, all resource types will have diagnostic logging enabled. If 'none' is selected, no resource types will have diagnostic logging enabled."
            }
        },
        "regCompPolParMPAACertificateThumb": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Motion Picture Association of America (MPAA) - Required Policy Initative Parameters: Certificate thumbprints that should exist under the Trusted Root. A semicolon-separated list of certificate thumbprints that should exist under the Trusted Root certificate store (Cert:\\LocalMachine\\Root). e.g. THUMBPRINT1;THUMBPRINT2;THUMBPRINT3"
            }
        },
        "regCompPolParMPAAApplicationName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Motion Picture Association of America (MPAA) - Required Policy Initative Parameters: Application names to be installed on VMs. A semicolon-separated list of the names of the applications that should be installed. e.g. 'python; powershell; Microsoft SQL Server 2014 (64-bit); Microsoft Visual Studio Code' or 'Microsoft SQL Server 2014*' (to match any application starting with 'Microsoft SQL Server 2014')'"
            }
        },
        "regCompPolParMPAAStoragePrefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Motion Picture Association of America (MPAA) - Required Policy Initative Parameters: Storage Account Prefix for Regional Storage Account to deploy diagnostic settings for Network Security Groups. This prefix will be combined with the network security group location to form the created storage account name."
            }
        },
        "regCompPolParMPAAResGroupPrefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Motion Picture Association of America (MPAA) - Required Policy Initative Parameters: Resource Group Name for Storage Account to deploy diagnostic settings for Network Security Groups. The resource group that the storage account will be created in."
            }
        },
        "regCompPolParMPAARBatchMetricName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Motion Picture Association of America (MPAA) - Required Policy Initative Parameters: Metric name on which alert rules should be configured in Batch accounts. The metric name that an alert rule must be enabled on."
            }
        },
        "regCompPolParSovBaseConfRegions": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Sovereignty Baseline - Confidential Policies - Required Policy Initative Parameters: The list of Azure Regions that are approved for usage. Any non-global resources attempted to be deployed outsize of this region will be restricted."
            }
        },
        "regCompPolParSovBaseGlobalRegions": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Sovereignty Baseline - Global Policies - Required Policy Initative Parameters: The list of Azure Regions that are approved for usage. Any non-global resources attempted to be deployed outsize of this region will be restricted."
            }
        },
        "regCompPolParSwift2020VmAdminsInclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "SWIFT CSP-CSCF v2020 - Required Policy Initative Parameters: List of users that must be included in Windows VM Administrators group. A semicolon-separated list of users that should be included in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParSwift2020DomainFqdn": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "SWIFT CSP-CSCF v2020 - Required Policy Initative Parameters: The fully qualified domain name (FQDN) that the Windows VMs should be joined to"
            }
        },
        "regCompPolParCanadaFedPbmmVmAdminsInclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Canada Federal PBMM - Required Policy Initative Parameters: List of users that must be included in Windows VM Administrators group. A semicolon-separated list of users that should be included in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParCanadaFedPbmmVmAdminsExclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Canada Federal PBMM - Required Policy Initative Parameters: List of users that must be excluded in Windows VM Administrators group. A semicolon-separated list of users that should be excluded in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParCisV2KeyVaultKeysRotateDays": {
            "type": "int",
            "defaultValue": 90,
            "metadata": {
                "description": "CIS Microsoft Azure Foundations Benchmark v2.0.0 - Required Policy Initative Parameters: The maximum number of days before Keys in a Key Vault should be rotated. Keys should have a rotation policy ensuring that their rotation is scheduled within the specified number of days after creation."
            }
        },
        "regCompPolParCmmcL3VmAdminsInclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "CMMC Level 3 - Required Policy Initative Parameters: List of users that must be included in Windows VM Administrators group. A semicolon-separated list of users that should be included in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParCmmcL3VmAdminsExclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "CMMC Level 3 - Required Policy Initative Parameters: List of users that must be excluded in Windows VM Administrators group. A semicolon-separated list of users that should be excluded in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParHitrustHipaaApplicationName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "HITRUST/HIPAA - Required Policy Initative Parameters: Application names to be installed on VMs. A semicolon-separated list of the names of the applications that should be installed. e.g. 'python; powershell; Microsoft SQL Server 2014 (64-bit); Microsoft Visual Studio Code' or 'Microsoft SQL Server 2014*' (to match any application starting with 'Microsoft SQL Server 2014')'"
            }
        },
        "regCompPolParHitrustHipaaStoragePrefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "HITRUST/HIPAA - Required Policy Initative Parameters: Storage Account Prefix for Regional Storage Account to deploy diagnostic settings for Network Security Groups. This prefix will be combined with the network security group location to form the created storage account name."
            }
        },
        "regCompPolParHitrustHipaaResGroupPrefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "HITRUST/HIPAA - Required Policy Initative Parameters: Resource Group Name for Storage Account to deploy diagnostic settings for Network Security Groups. The resource group that the storage account will be created in."
            }
        },
        "regCompPolParHitrustHipaaCertificateThumb": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "HITRUST/HIPAA - Required Policy Initative Parameters: Certificate thumbprints that should exist under the Trusted Root. A semicolon-separated list of certificate thumbprints that should exist under the Trusted Root certificate store (Cert:\\LocalMachine\\Root). e.g. THUMBPRINT1;THUMBPRINT2;THUMBPRINT3"
            }
        },
        "regCompPolParIrs1075Sep2016VmAdminsExclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "IRS1075 September 2016 - Required Policy Initative Parameters: List of users that must be excluded in Windows VM Administrators group. A semicolon-separated list of users that should be excluded in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParIrs1075Sep2016VmAdminsInclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "IRS1075 September 2016 - Required Policy Initative Parameters: List of users that must be included in Windows VM Administrators group. A semicolon-separated list of users that should be included in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParNZIsmRestrictedVmAdminsInclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "New Zealand ISM Restricted - Required Policy Initative Parameters: List of users that must be included in Windows VM Administrators group. A semicolon-separated list of users that should be included in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParNZIsmRestrictedVmAdminsExclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "New Zealand ISM Restricted - Required Policy Initative Parameters: List of users that must be excluded in Windows VM Administrators group. A semicolon-separated list of users that should be excluded in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParNistSp800171R2VmAdminsExclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "NIST SP 800-171 Rev. 2 - Required Policy Initative Parameters: List of users that must be excluded in Windows VM Administrators group. A semicolon-separated list of users that should be excluded in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParNistSp800171R2VmAdminsInclude": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "NIST SP 800-171 Rev. 2 - Required Policy Initative Parameters: List of users that must be included in Windows VM Administrators group. A semicolon-separated list of users that should be included in the Administrators local group; Ex: Administrator; myUser1; myUser2"
            }
        },
        "regCompPolParSoc2Type2AllowedRegistries": {
            "type": "string",
            "defaultValue": "^[^\\/]+\\.azurecr\\.io\\/.+$",
            "metadata": {
                "description": "SOC 2 Type 2 - Required Policy Initative Parameters: AKS + Arc K8s - Allowed registry or registries regex. The RegEx rule used to match allowed container image field in a Kubernetes cluster. For example, to allow any Azure Container Registry image by matching partial path: ^[^\\/]+\\.azurecr\\.io\\/.+$ and for multiple registries: ^([^\\/]+\\.azurecr\\.io|registry\\.io)\\/.+$"
            }
        },
        "regCompPolParSoc2Type2MaxCpuUnits": {
            "type": "string",
            "defaultValue": "200m",
            "metadata": {
                "description": "SOC 2 Type 2 - Required Policy Initative Parameters: AKS + Arc K8s - Max allowed CPU units. The maximum CPU units allowed for a container. E.g. 200m. For more information, please refer <a href=\"https://aka.ms/k8s-policy-pod-limits\">https://aka.ms/k8s-policy-pod-limits</a>"
            }
        },
        "regCompPolParSoc2Type2MaxMemoryBytes": {
            "type": "string",
            "defaultValue": "1Gi",
            "metadata": {
                "description": "SOC 2 Type 2 - Required Policy Initative Parameters: AKS + Arc K8s - Max allowed memory bytes. The maximum memory bytes allowed for a container. E.g. 1Gi. For more information, please refer <a href=\"https://aka.ms/k8s-policy-pod-limits\">https://aka.ms/k8s-policy-pod-limits</a>"
            }
        },
        "listOfResourceTypesDisallowedForDeletion": {
            "type": "array",
            "defaultValue": [
                "microsoft.managedidentity/userassignedidentities"
            ],
            "metadata": {
                "description": "Array of Azure resources to not allow deletion of. If a resource type is specified in this list, the policy will deny the deletion of the resource."
            }
        }
    },
    "variables": {
        // Declaring the prescriptive management group structure that will be used in the scope construction
        "mgmtGroups": {
            "eslzRoot": "[parameters('enterpriseScaleCompanyPrefix')]",
            "platform": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'platform')]",
            "management": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'management')]",
            "connectivity": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'connectivity')]",
            "identity": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'identity')]",
            "lzs": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'landingzones')]",
            "corp": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'corp')]",
            "online": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'online')]",
            "decommissioned": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'decommissioned')]",
            "sandboxes": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'sandboxes')]"
        },
        "mgmtGroupsLite": {
            "eslzRoot": "[parameters('enterpriseScaleCompanyPrefix')]",
            "platform": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'platform')]",
            "lzs": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'landingzones')]",
            "corp": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'corp')]",
            "online": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'online')]",
            "decommissioned": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'decommissioned')]",
            "sandboxes": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'sandboxes')]"
        },
        "copy": [
            {
                "name": "mgmtGroupsArray",
                "count": "[length(items(variables('mgmtGroups')))]",
                "input": "[items(variables('mgmtGroups'))[copyIndex('mgmtGroupsArray')].value]"
            },
            {
                "name": "mgmtGroupsESLiteArray",
                "count": "[length(items(variables('mgmtGroupsLite')))]",
                "input": "[items(variables('mgmtGroupsLite'))[copyIndex('mgmtGroupsESLiteArray')].value]"
            }
        ],

        // Declaring scopes that will be used for optional deployments, such as platform components (monitoring, networking, identity), policy assignments, subscription placement etc.
        "scopes": {
            "eslzRootManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').eslzRoot)]",
            "platformManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').platform)]",
            "managementManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').management)]",
            "connectivityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').connectivity)]",
            "identityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').identity)]",
            "lzsManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').lzs)]",
            "corpManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').corp)]",
            "onlineManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').online)]",
            "decommissionedManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').decommissioned)]",
            "sandboxManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('mgmtGroups').sandboxes)]"
        },
        // Declaring root uris for external dependency repositories.
        "rootUris": {
            "monitorRepo": "https://raw.githubusercontent.com/Azure/azure-monitor-baseline-alerts/2024-09-02/"
        },
        // Declaring all required deployment uri's used for deployments of composite ARM templates for ESLZ
        "azPrivateDnsPolicyAssignmentMapping": {
            "https://management.azure.com/": "managementGroupTemplates/policyAssignments/DINE-PrivateDNSZonesPolicyAssignment.json",
            "https://management.usgovcloudapi.net": "managementGroupTemplates/policyAssignments/gov/fairfaxDINE-PrivateDNSZonesPolicyAssignment.json"
        },
        "azPrivateDnsPolicyAssignment": "[variables('azPrivateDnsPolicyAssignmentMapping')[environment().resourceManager]]",
        "deploymentUris": {
            "managementGroups": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/mgmtGroupStructure/mgmtGroups.json')]",
            "managementGroupsLite": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/mgmtGroupStructure/mgmtGroupsLite.json')]",
            "roleDefinitions": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/roleDefinitions/customRoleDefinitions.json')]",
            "policyDefinitions": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyDefinitions/policies.json')]",
            "initiativeDefinitions": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyDefinitions/initiatives.json')]",
            "vnetConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/hubspoke-connectivity.json')]",
            "vwanConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vwan-connectivity.json')]",
            "nvaConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/nvahubspoke-connectivity.json')]",
            "subscriptionPlacement": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/subscriptionOrganization/subscriptionOrganization.json')]",
            "monitoring": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/logAnalyticsWorkspace.json')]",
            "dataCollectionRuleVmInsights": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/dataCollectionRule-VmInsights.json')]",
            "userAssignedIdentity": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/userAssignedIdentity.json')]",
            "resourceGroup": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/resourceGroup.json')]",
            "ddosProtection": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/ddosProtection.json')]",
            "logAnalyticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-LogAnalyticsPolicyAssignment.json')]",
            "asbPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-ASBPolicyAssignment.json')]",
            "regulatoryComplianceInitaitves": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-RegulatoryCompliancePolicyAssignment.json')]",
            "resourceDiagnosticsInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-ResourceDiagnosticsPolicyAssignment.json')]",
            "activityDiagnosticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-ActivityLogPolicyAssignment.json')]",
            "mdfcConfigPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-MDFCConfigPolicyAssignment.json')]",
            "mdEnpointsPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-MDEndpointsPolicyAssignment.json')]",
            "mdEnpointsAMAPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-MDEndpointsAMAPolicyAssignment.json')]",
            "atpOssDbPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-AtpOssDbPolicyAssignment.json')]",
            "atpSqlDbPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-AtpSqlDbPolicyAssignment.json')]",
            "azVmMonitorPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-VMMonitoringPolicyAssignment.json')]",
            "azVmssMonitorPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-VMSSMonitoringPolicyAssignment.json')]",
            "azVmHybridMonitorPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-VMHybridMonitoringPolicyAssignment.json')]",
            "azVmBackupPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-VMBackupPolicyAssignment.json')]",
            "aksPrivEscalationPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-AksPrivEscalationPolicyAssignment.json')]",
            "aksPrivilegedPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-AksPrivilegedPolicyAssignment.json')]",
            "tlsSslPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-DINE-APPEND-TLS-SSL-PolicyAssignment.json')]",
            "aksHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-AksWithoutHttpsPolicyAssignment.json')]",
            "ipFwdPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-IPForwardingPolicyAssignment.json')]",
            "publicEndpointPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-PublicEndpointPolicyAssignment.json')]",
            "privateDnsZonePolicyAssignment": "[uri(deployment().properties.templateLink.uri, variables('azPrivateDnsPolicyAssignment'))]",
            "pipPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-PublicIpAddressPolicyAssignment.json')]",
            "pipOnNicPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-PublicIpAddressOnNICPolicyAssignment.json')]",
            "mgmtFromInternetPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-MgmtPortsFromInternetPolicyAssignment.json')]",
            "storageHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-StorageWithoutHttpsPolicyAssignment.json')]",
            "kvGuardrailsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsKeyVaultPolicyAssignment.json')]",
            "backupPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-BackupPolicyAssignment.json')]",
            "denyHybridNetworkingPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-HybridNetworkingPolicyAssignment.json')]",
            "auditPeDnsZonesPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/AUDIT-PeDnsZonesPolicyAssignment.json')]",
            "auditAppGwWafPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/AUDIT-AppGwWafPolicyAssignment.json')]",
            "enforceAcsbPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-AcsbPolicyAssignment.json')]",
            "subnetNsgPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-SubnetWithoutNsgPolicyAssignment.json')]",
            "sqlAuditPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-SQLAuditingPolicyAssignment.json')]",
            "sqlEncryptionPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-SQLEncryptionPolicyAssignment.json')]",
            "sqlThreatPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-SQLThreatPolicyAssignment.json')]",
            "decommissionPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-ALZ-DecommissionedPolicyAssignment.json')]",
            "sandboxPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-ALZ-SandboxPolicyAssignment.json')]",
            "ddosPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/MODIFY-DDoSPolicyAssignment.json')]",
            "corpVnetPeering": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vnetPeering.json')]",
            "corpVwanPeering": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vnetPeeringVwan.json')]",
            "hubVnetPeering": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vnetPeeringHub.json')]",
            "hubVnetRouting": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/vnetRouteTable.json')]",
            "privateDnsZones": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/privateDnsZones.json')]",
            "roleAssignments": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/roleAssignments/roleAssignment.json')]",
            "classicResourcesPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-ClassicResourceTypesPolicyAssignment.json')]",
            "govMdfcPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/gov/fairfaxDINE-MDFCConfigPolicyAssignment.json')]",
            "costOptimizationPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/AUDIT-UnusedResourcesPolicyAssignment.json')]",
            "trustedLaunchPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/AUDIT-TrustedLaunchPolicyAssignment.json')]",
            "zoneResilientPolicyInitiative": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/AUDIT-ZoneResilientPolicyAssignment.json')]",
            "resourceRgLocationPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/AUDIT-ResourceRGLocationPolicyAssignment.json')]",
            "VMUnmanagedDiskPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENY-VMUnmanagedDiskPolicyAssignment.json')]",
            "diagnosticSettingsforManagementGroups": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/diagSettingsMGs/diagSettingsMGs.json')]",
            "privateSubnetPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-SubnetPrivatePolicyAssignment.json')]",
            // references to https://github.com/Azure/azure-monitor-baseline-alerts
            "monitorPolicyDefinitions": "[uri(variables('rootUris').monitorRepo, 'patterns/alz/alzArm.json')]",
            "azureUpdateManagerPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/MODIFY-AUM-CheckUpdatesPolicyAssignment.json')]",
            "dataCollectionRuleChangeTracking": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/dataCollectionRule-CT.json')]",
            "ChangeTrackingVmPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-ChangeTrackingVMPolicyAssignment.json')]",
            "ChangeTrackingVmArcPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-ChangeTrackingVMArcPolicyAssignment.json')]",
            "ChangeTrackingVmssPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-ChangeTrackingVMSSPolicyAssignment.json')]",
            "MDFCDefenderSqlAma": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DINE-MDFCDefenderSQLAMAPolicyAssignment.json')]",
            "dataCollectionRuleMdfcDefenderSQL": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/dataCollectionRule-DefenderSQL.json')]",
            "MDFCSubscriptionEnablement": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/mdfcConfiguration.json')]",
            // Workload Specific Compliance Initiatives
            "wsCMKPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-EncryptionCMKPolicyAssignment.json')]",
            "wsAPIMPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsAPIMPolicyAssignment.json')]",
            "wsAppServicesPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsAppServicesPolicyAssignment.json')]",
            "wsAutomationPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsAutomationPolicyAssignment.json')]",
            "wsBotServicePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsBotServicePolicyAssignment.json')]",
            "wsCognitiveServicesPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsCognitiveServicesPolicyAssignment.json')]",
            "wsComputePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsComputePolicyAssignment.json')]",
            "wsContainerAppsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsContainerAppsPolicyAssignment.json')]",
            "wsContainerInstancePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsContainerInstancePolicyAssignment.json')]",
            "wsContainerRegistryPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsContainerRegistryPolicyAssignment.json')]",
            "wsCosmosDbPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsCosmosDbPolicyAssignment.json')]",
            "wsDataExplorerPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsDataExplorerPolicyAssignment.json')]",
            "wsDataFactoryPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsDataFactoryPolicyAssignment.json')]",
            "wsEventGridPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsEventGridPolicyAssignment.json')]",
            "wsEventHubPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsEventHubPolicyAssignment.json')]",
            "wsKeyVaultSupPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsKeyVaultSupPolicyAssignment.json')]",
            "wsKubernetesPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsKubernetesPolicyAssignment.json')]",
            "wsMachineLearningPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsMachineLearningPolicyAssignment.json')]",
            "wsMySQLPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsMySQLPolicyAssignment.json')]",
            "wsNetworkPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsNetworkPolicyAssignment.json')]",
            "wsOpenAIPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsOpenAIPolicyAssignment.json')]",
            "wsPostgreSQLPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsPostgreSQLPolicyAssignment.json')]",
            "wsServiceBusPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsServiceBusPolicyAssignment.json')]",
            "wsSQLPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsSQLPolicyAssignment.json')]",
            "wsStoragePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsStoragePolicyAssignment.json')]",
            "wsSynapsePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsSynapsePolicyAssignment.json')]",
            "wsVirtualDesktopPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/ENFORCE-GuardrailsVirtualDesktopPolicyAssignment.json')]",
            "denyActionDeleteUAMIAMAPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'managementGroupTemplates/policyAssignments/DENYACTION-DeleteUAMIAMAPolicyAssignment.json')]"
        },
        // Declaring deterministic deployment names
        "deploymentSuffix": "[concat('-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow')))]",
        "deploymentNames": {
            "mgmtGroupDeploymentName": "[take(concat('alz-Mgs', variables('deploymentSuffix')), 64)]",
            "mgmtSubscriptionPlacement": "[take(concat('alz-MgmtSub', variables('deploymentSuffix')), 64)]",
            "corpPeeringDeploymentName": "[take(concat('alz-CorpPeering', variables('deploymentSuffix')), 60)]",
            "hubPeeringDeploymentName": "[take(concat('alz-HubPeering', variables('deploymentSuffix')), 60)]",
            "hubPeering2DeploymentName": "[take(concat('alz-HubPeering2', variables('deploymentSuffix')), 60)]",
            "connectivitySubscriptionPlacement": "[take(concat('alz-ConnectivitySub', variables('deploymentSuffix')), 64)]",
            "identitySubscriptionPlacement": "[take(concat('alz-IdentitySub', variables('deploymentSuffix')), 64)]",
            "roleDefsDeploymentName": "[take(concat('alz-RoleDefs', variables('deploymentSuffix')), 64)]",
            "policyDeploymentName": "[take(concat('alz-Policy', variables('deploymentSuffix')), 64)]",
            "initiativeDeploymentName": "[take(concat('alz-PolicySet', variables('deploymentSuffix')), 64)]",
            "monitorPolicyDeploymentName": "[take(concat('alz-MonitorPolicy', variables('deploymentSuffix')), 64)]",
            "ddosRgDeploymentName": "[take(concat('alz-DDoSRg', variables('deploymentSuffix')), 64)]",
            "ddosDeploymentName": "[take(concat('alz-DDoS', variables('deploymentSuffix')), 64)]",
            "ddosHubPolicyDeploymentName": "[take(concat('alz-DDoSHubPolicy', variables('deploymentSuffix')), 64)]",
            "ddosLzPolicyDeploymentName": "[take(concat('alz-DDoSLZPolicy', variables('deploymentSuffix')), 64)]",
            "monitoringDeploymentName": "[take(concat('alz-Monitoring', variables('deploymentSuffix')), 64)]",
            "dataCollectionRuleVmInsightsDeploymentName": "[take(concat('alz-DataCollectionRuleVmInsights', variables('deploymentSuffix')), 64)]",
            "logAnalyticsPolicyDeploymentName": "[take(concat('alz-LAPolicy', variables('deploymentSuffix')), 64)]",
            "monitorConnectivityDeploymentName": "[take(concat('alz-ConnectivityMonitor', variables('deploymentSuffix')), 64)]",
            "monitorIdentityDeploymentName": "[take(concat('alz-IdentityMonitor', variables('deploymentSuffix')), 64)]",
            "monitorManagementDeploymentName": "[take(concat('alz-ManagementMonitor', variables('deploymentSuffix')), 64)]",
            "monitorLandingZoneDeploymentName": "[take(concat('alz-LandingZoneMonitor', variables('deploymentSuffix')), 64)]",
            "monitorServiceHealthDeploymentName": "[take(concat('alz-SvcHealthMonitor', variables('deploymentSuffix')), 64)]",
            "asbPolicyDeploymentName": "[take(concat('alz-ASB', variables('deploymentSuffix')), 64)]",
            "regulatoryComplianceInitativesToAssignDeploymentName": "[take(concat('alz-RegComp-', deployment().location, '-', uniqueString(parameters('currentDateTimeUtcNow')), '-'), 64)]",
            "resourceDiagnosticsPolicyDeploymentName": "[take(concat('alz-ResourceDiagnostics', variables('deploymentSuffix')), 64)]",
            "activityDiagnosticsPolicyDeploymentName": "[take(concat('alz-ActivityDiagnostics', variables('deploymentSuffix')), 64)]",
            "ascPolicyDeploymentName": "[take(concat('alz-ASC', variables('deploymentSuffix')), 64)]",
            "atpOssDbPolicyDeploymentName": "[take(concat('alz-AtpOssDb', variables('deploymentSuffix')), 64)]",
            "atpSqlDbPolicyDeploymentName": "[take(concat('alz-AtpSqlDb', variables('deploymentSuffix')), 64)]",
            "ascGovPolicyDeploymentName": "[take(concat('alz-Gov-ASC', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityHubDeploymentName": "[take(concat('alz-HubSpoke', variables('deploymentSuffix')), 64)]",
            "vwanConnectivityHubDeploymentName": "[take(concat('alz-VWanHub', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityHub2DeploymentName": "[take(concat('alz-HubSpoke2', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityRouteTableDeploymentName": "[take(concat('alz-HubRoute', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityRouteTable2DeploymentName": "[take(concat('alz-HubRoute2', variables('deploymentSuffix')), 64)]",
            "nvaConnectivityHubDeploymentName": "[take(concat('alz-NVAHub', variables('deploymentSuffix')), 64)]",
            "nvaConnectivityHub2DeploymentName": "[take(concat('alz-NVAHub2', variables('deploymentSuffix')), 64)]",
            "azVmMonitorPolicyDeploymentName": "[take(concat('alz-AzVmMonitor', variables('deploymentSuffix')), 64)]",
            "azVmssMonitorPolicyDeploymentName": "[take(concat('alz-AzVmssMonitor', variables('deploymentSuffix')), 64)]",
            "azVmHybridMonitorPolicyDeploymentName": "[take(concat('alz-AzVmHybridMonitor', variables('deploymentSuffix')), 64)]",
            "azBackupLzPolicyDeploymentName": "[take(concat('alz-AzBackupLz', variables('deploymentSuffix')), 64)]",
            "azBackupIdentityPolicyDeploymentName": "[take(concat('alz-AzBackupIdentity', variables('deploymentSuffix')), 64)]",
            "aksPrivEscalationPolicyDeploymentName": "[take(concat('alz-AksPrivEsc', variables('deploymentSuffix')), 64)]",
            "aksHttpsPolicyDeploymentName": "[take(concat('alz-AksHttps', variables('deploymentSuffix')), 64)]",
            "aksPrivilegedPolicyDeploymentName": "[take(concat('alz-AksPrivileged', variables('deploymentSuffix')), 64)]",
            "tlsSslPolicyDeploymentName": "[take(concat('alz-TLSSSL', variables('deploymentSuffix')), 64)]",
            "ipFwPolicyDeploymentName": "[take(concat('alz-IPFwd', variables('deploymentSuffix')), 64)]",
            "publicEndpointPolicyDeploymentName": "[take(concat('alz-PEndpoint', variables('deploymentSuffix')), 64)]",
            "privateDnsPolicyDeploymentName": "[take(concat('alz-PrivDNSAssignment', variables('deploymentSuffix')), 64)]",
            "pipPolicyDeploymentName": "[take(concat('alz-PIP', variables('deploymentSuffix')), 64)]",
            "pipOnNicPolicyDeploymentName": "[take(concat('alz-PipOnNic', variables('deploymentSuffix')), 64)]",
            "mgmtFromInternetPolicyDeploymentName": "[take(concat('alz-MgmtPorts', variables('deploymentSuffix')), 64)]",
            "mgmtFromInternetIdentityPolicyDeploymentName": "[take(concat('alz-MgmtPortsIdentity', variables('deploymentSuffix')), 64)]",
            "storageHttpsPolicyDeploymentName": "[take(concat('alz-StorageHttps', variables('deploymentSuffix')), 64)]",
            "kvGuardrailsPolicyDeploymentName": "[take(concat('alz-KvGuardrails', variables('deploymentSuffix')), 64)]",
            "kvGuardrailsPolicyPlatDeploymentName": "[take(concat('alz-KvGuardrailsPlat', variables('deploymentSuffix')), 64)]",
            "backupPolicyDeploymentName": "[take(concat('alz-Backup', variables('deploymentSuffix')), 64)]",
            "backupPlatPolicyDeploymentName": "[take(concat('alz-BackupPlat', variables('deploymentSuffix')), 64)]",
            "denyHybridNetworkingPolicyDeploymentName": "[take(concat('alz-DenyHybridNetworking', variables('deploymentSuffix')), 64)]",
            "auditPeDnsZonesPolicyDeploymentName": "[take(concat('alz-AuditPeDnsZones', variables('deploymentSuffix')), 64)]",
            "auditAppGwWafPolicyDeploymentName": "[take(concat('alz-AppGwWaf', variables('deploymentSuffix')), 64)]",
            "enforceAcsbPolicyDeploymentName": "[take(concat('alz-Acsb', variables('deploymentSuffix')), 64)]",
            "subnetNsgPolicyDeploymentName": "[take(concat('alz-SubnetNsg', variables('deploymentSuffix')), 64)]",
            "subnetNsgIdentityPolicyDeploymentName": "[take(concat('alz-SubnetNsgIdentity', variables('deploymentSuffix')), 64)]",
            "sqlAuditPolicyDeploymentName": "[take(concat('alz-SqlAudit', variables('deploymentSuffix')), 64)]",
            "sqlAuditRoleAssignmentDeploymentName1": "[take(concat('alz-SqlAuditRbac1', variables('deploymentSuffix')), 64)]",
            "sqlAuditRoleAssignmentDeploymentName2": "[take(concat('alz-SqlAuditRbac2', variables('deploymentSuffix')), 64)]",
            "sqlEncryptionPolicyDeploymentName": "[take(concat('alz-SqlEncrypt', variables('deploymentSuffix')), 64)]",
            "sqlThreatPolicyDeploymentName": "[take(concat('alz-SqlThreat', variables('deploymentSuffix')), 64)]",
            "decommissionPolicyDeploymentName": "[take(concat('alz-DecommissionPol', variables('deploymentSuffix')), 64)]",
            "sandboxPolicyDeploymentName": "[take(concat('alz-SandboxPol', variables('deploymentSuffix')), 64)]",
            "onlineLzSubs": "[take(concat('alz-OnlineLzs', variables('deploymentSuffix')), 60)]",
            "corpLzSubs": "[take(concat('alz-CorpLzs', variables('deploymentSuffix')), 60)]",
            "corpConnectedMoveLzSubs": "[take(concat('alz-CorpConnLzs', variables('deploymentSuffix')), 50)]",
            "corpConnectedLzSubs": "[take(concat('alz-CorpPeering', variables('deploymentSuffix')), 50)]",
            "privateDnsZoneRgDeploymentName": "[take(concat('alz-PrivDNSRG', variables('deploymentSuffix')), 64)]",
            "privateDnsZonesDeploymentName": "[take(concat('alz-PrivDNSZones', variables('deploymentSuffix')), 35)]",
            "privateDnsZoneRg2DeploymentName": "[take(concat('alz-PrivDNSRG2', variables('deploymentSuffix')), 64)]",
            "privateDnsZones2DeploymentName": "[take(concat('alz-PrivDNSZones2', variables('deploymentSuffix')), 35)]",
            "dnsZoneRoleAssignmentDeploymentName": "[take(concat('alz-DNSZoneRole', variables('deploymentSuffix')), 64)]",
            "identityPeeringDeploymentName": "[take(concat('alz-IDPeering', variables('deploymentSuffix')), 64)]",
            "identityPeering2DeploymentName": "[take(concat('alz-IDPeering2', variables('deploymentSuffix')), 64)]",
            "identityVwanPeeringDeploymentName": "[take(concat('alz-IDVwanPeering', variables('deploymentSuffix')), 64)]",
            "identityVwanPeering2DeploymentName": "[take(concat('alz-IDVwanPeering2', variables('deploymentSuffix')), 64)]",
            "mdEndpointsDeploymentName": "[take(concat('alz-MDEndpoints', variables('deploymentSuffix')), 64)]",
            "mdEndpointsAMADeploymentName": "[take(concat('alz-MDEndpointsAMA', variables('deploymentSuffix')), 64)]",
            "corpConnectedLzVwanSubs": "[take(concat('alz-CorpConnLzsVwan', variables('deploymentSuffix')), 50)]",
            "privateSubnetDeploymentName": "[take(concat('alz-pvtSubnet', variables('deploymentSuffix')), 64)]",
            "pidCuaDeploymentName": "[take(concat('pid-', variables('cuaid'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow'))), 64)]",
            "denyClassicResourcePolicyDeploymentName": "[take(concat('alz-NoClassicResource', variables('deploymentSuffix')), 64)]",
            "costOptimizationDeploymentName": "[take(concat('alz-CostOptimization', variables('deploymentSuffix')), 64)]",
            "trustedLaunchDeploymentName": "[take(concat('alz-TrustedLaunch', variables('deploymentSuffix')), 64)]",
            "zoneResilientDeploymentName": "[take(concat('alz-ZoneResilient', variables('deploymentSuffix')), 64)]",
            "resourceRgLocationDeploymentName": "[take(concat('alz-ResourceRGLoc', variables('deploymentSuffix')), 64)]",
            "denyVMUnmanagedDiskPolicyDeploymentName": "[take(concat('alz-NoUnmanagedDiskResource', variables('deploymentSuffix')), 64)]",
            "ztnPhase1PidCuaDeploymentName": "[take(concat('pid-', variables('ztnPhase1CuaId'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow'), coalesce(parameters('connectivitySubscriptionId'), parameters('singlePlatformSubscriptionId'))), '-ztnp1'), 64)]",
            "ambaPortalPidCuaDeploymentName": "[take(concat('pid-', variables('ambaPortalCuaId'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow'), coalesce(parameters('connectivitySubscriptionId'), parameters('singlePlatformSubscriptionId'))), '-ztnp1'), 64)]",
            "pidCuaDeploymentNameSecondaryRegion": "[take(concat('pid-', variables('cuaidSecondaryRegion'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow'))), 64)]",
            "diagnosticSettingsforMGsDeploymentName": "[take(concat('alz-DiagSettingsMGs', variables('deploymentSuffix')), 64)]",
            "userAssignedIdentityDeploymentName": "[take(concat('alz-UserAssignedIdentity', variables('deploymentSuffix')), 60)]",
            "azureUpdateManagerPolicyDeploymentName": "[take(concat('alz-AzureUpdateManager', variables('deploymentSuffix')), 64)]",
            "dataCollectionRuleChangeTrackingDeploymentName": "[take(concat('alz-DataCollectionRuleChangeTracking', variables('deploymentSuffix')), 64)]",
            "ChangeTrackingVmDeploymentName": "[take(concat('alz-ChangeTracking-VM', variables('deploymentSuffix')), 64)]",
            "ChangeTrackingVmArcDeploymentName": "[take(concat('alz-ChangeTracking-VMArc', variables('deploymentSuffix')), 64)]",
            "ChangeTrackingVmssDeploymentName": "[take(concat('alz-ChangeTracking-VMSS', variables('deploymentSuffix')), 64)]",
            "MDFCDefenderSqlAmaDeploymentName": "[take(concat('alz-MDFCDefenderForSqlAma', variables('deploymentSuffix')), 64)]",
            "dataCollectionRuleMdfcDefenderSQLDeploymentName": "[take(concat('alz-DataCollectionRuleDefenderSQL', variables('deploymentSuffix')), 64)]",
            "MDFCSubscriptionEnableDeploymentName": "[take(concat('alz-MDFCSubEnable', variables('deploymentSuffix')), 62)]",
            "pidCuaDeploymentNameSinglePlatformSub": "[take(concat('pid-', variables('cuaidSinglePlatformSub'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow'))), 64)]",
            "pidCuaDeploymentNameMultiPlatformSubs": "[take(concat('pid-', variables('cuaidMultiPlatformSubs'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow'))), 64)]",
            "pidCuaDeploymentNameNetworkingNone": "[take(concat('pid-', variables('cuaidNetworkingNone'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow'))), 64)]",
            "pidCuaDeploymentNameNetworkingHubSpoke": "[take(concat('pid-', variables('cuaidNetworkingHubSpoke'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow'))), 64)]",
            "pidCuaDeploymentNameNetworkingVirtualWan": "[take(concat('pid-', variables('cuaidNetworkingVirtualWan'), '-' , uniqueString(deployment().location, parameters('enterpriseScaleCompanyPrefix'), parameters('currentDateTimeUtcNow'))), 64)]",
            "denyActionDeleteUAMIAMAPolicyDeploymentName": "[take(concat('alz-DenyActionDeleteUAMI', variables('deploymentSuffix')), 64)]",
            // Workload Specific Compliance Initiatives
            "wsCMKDeploymentName": "[take(concat('alz-wsCMK', variables('deploymentSuffix')), 35)]",
            "wsAPIMDeploymentName": "[take(concat('alz-wsAPIM', variables('deploymentSuffix')), 35)]",
            "wsAppServicesDeploymentName": "[take(concat('alz-wsAppService', variables('deploymentSuffix')), 35)]",
            "wsAutomationDeploymentName": "[take(concat('alz-wsAutomation', variables('deploymentSuffix')), 35)]",
            "wsBotServiceDeploymentName": "[take(concat('alz-wsBotService', variables('deploymentSuffix')), 35)]",
            "wsCognitiveServicesDeploymentName": "[take(concat('alz-wsCognitiveServices', variables('deploymentSuffix')), 35)]",
            "wsComputeDeploymentName": "[take(concat('alz-wsCompute', variables('deploymentSuffix')), 35)]",
            "wsContainerAppsDeploymentName": "[take(concat('alz-wsContainerApps', variables('deploymentSuffix')), 35)]",
            "wsContainerInstanceDeploymentName": "[take(concat('alz-wsContainerInstance', variables('deploymentSuffix')), 35)]",
            "wsContainerRegistryDeploymentName": "[take(concat('alz-wsContainerRegistry', variables('deploymentSuffix')), 35)]",
            "wsCosmosDbDeploymentName": "[take(concat('alz-wsCosmosDb', variables('deploymentSuffix')), 35)]",
            "wsDataExplorerDeploymentName": "[take(concat('alz-wsDataExplorer', variables('deploymentSuffix')), 35)]",
            "wsDataFactoryDeploymentName": "[take(concat('alz-wsDataFactory', variables('deploymentSuffix')), 35)]",
            "wsEventGridDeploymentName": "[take(concat('alz-wsEventGrid', variables('deploymentSuffix')), 35)]",
            "wsEventHubDeploymentName": "[take(concat('alz-wsEventHub', variables('deploymentSuffix')), 35)]",
            "wsKeyVaultSupDeploymentName": "[take(concat('alz-wsKeyVaultSup', variables('deploymentSuffix')), 35)]",
            "wsKubernetesDeploymentName": "[take(concat('alz-wsKubernetes', variables('deploymentSuffix')), 35)]",
            "wsMachineLearningDeploymentName": "[take(concat('alz-wsMachineLearning', variables('deploymentSuffix')), 35)]",
            "wsMySQLDeploymentName": "[take(concat('alz-wsMySQL', variables('deploymentSuffix')), 35)]",
            "wsNetworkDeploymentName": "[take(concat('alz-wsNetwork', variables('deploymentSuffix')), 35)]",
            "wsOpenAIDeploymentName": "[take(concat('alz-wsOpenAI', variables('deploymentSuffix')), 35)]",
            "wsPostgreSQLDeploymentName": "[take(concat('alz-wsPostgreSQL', variables('deploymentSuffix')), 35)]",
            "wsServiceBusDeploymentName": "[take(concat('alz-wsServiceBus', variables('deploymentSuffix')), 35)]",
            "wsSQLDeploymentName": "[take(concat('alz-wsSQL', variables('deploymentSuffix')), 35)]",
            "wsStorageDeploymentName": "[take(concat('alz-wsStorage', variables('deploymentSuffix')), 35)]",
            "wsSynapseDeploymentName": "[take(concat('alz-wsSynapse', variables('deploymentSuffix')), 35)]",
            "wsVirtualDesktopDeploymentName": "[take(concat('alz-wsVirtualDesktop', variables('deploymentSuffix')), 35)]"
        },
        "esLiteDeploymentNames": {
            "mgmtGroupLiteDeploymentName": "[take(concat('alz-MgsLite', variables('deploymentSuffix')), 64)]",
            "mgmtFromInternetIdentityLitePolicyDeploymentName": "[take(concat('alz-MgmtIdentity', variables('deploymentSuffix')), 64)]",
            "azBackupIdentityLitePolicyDeploymentName": "[take(concat('alz-AzBackupIdentity', variables('deploymentSuffix')), 64)]",
            "subnetNsgIdentityLitePolicyDeploymentName": "[take(concat('alz-SubnetNsgIdentity', variables('deploymentSuffix')), 64)]",
            "monitoringLiteDeploymentName": "[take(concat('alz-MonitoringLite', variables('deploymentSuffix')), 64)]",
            "logAnalyticsLitePolicyDeploymentName": "[take(concat('alz-LAPolicyLite', variables('deploymentSuffix')), 64)]",
            "platformLiteSubscriptionPlacement": "[take(concat('alz-PlatformSubLite', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityHubLiteDeploymentName": "[take(concat('alz-VnetHubLite', variables('deploymentSuffix')), 64)]",
            "vwanConnectivityHubLiteDeploymentName": "[take(concat('alz-VWanHubLite', variables('deploymentSuffix')), 64)]",
            "nvaConnectivityHubLiteDeploymentName": "[take(concat('alz-NVAHubLite', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityHubLite2DeploymentName": "[take(concat('alz-VnetHubLite2', variables('deploymentSuffix')), 64)]",
            "hubPeeringDeploymentName": "[take(concat('alz-HubPeering', variables('deploymentSuffix')), 60)]",
            "hubPeering2DeploymentName": "[take(concat('alz-HubPeering2', variables('deploymentSuffix')), 60)]",
            "vnetConnectivityRouteTableDeploymentName": "[take(concat('alz-HubRoute', variables('deploymentSuffix')), 64)]",
            "vnetConnectivityRouteTable2DeploymentName": "[take(concat('alz-HubRoute2', variables('deploymentSuffix')), 64)]",
            "nvaConnectivityHubLite2DeploymentName": "[take(concat('alz-NVAHubLite2', variables('deploymentSuffix')), 64)]",
            "ddosRgLiteDeploymentName": "[take(concat('alz-DDoSRgLite', variables('deploymentSuffix')), 64)]",
            "ddosLiteDeploymentName": "[take(concat('alz-DDoSLite', variables('deploymentSuffix')), 64)]",
            "ddosHubLitePolicyDeploymentName": "[take(concat('alz-DDoSHubPolicyLite', variables('deploymentSuffix')), 64)]",
            "privateDnsZoneRgLiteDeploymentName": "[take(concat('alz-PrivDNSRGLite', variables('deploymentSuffix')), 64)]",
            "privateDnsZonesLiteDeploymentName": "[take(concat('alz-PrivDNSLite', variables('deploymentSuffix')), 35)]",
            "privateDnsZonesLite1DeploymentName": "[take(concat('alz-PrivDNSLite1', variables('deploymentSuffix')), 35)]",
            "privateDnsZoneRgLite2DeploymentName": "[take(concat('alz-PrivDNSRGLite2', variables('deploymentSuffix')), 64)]",
            "privateDnsZonesLite2DeploymentName": "[take(concat('alz-PrivDNSLite2', variables('deploymentSuffix')), 35)]",
            "monitorPolicyLiteDeploymentName": "[take(concat('alz-MonitorPolicyLite', variables('deploymentSuffix')), 64)]",
            "dataCollectionRuleVmInsightsLiteDeploymentName": "[take(concat('alz-DataCollectionRuleVmInsightsLite', variables('deploymentSuffix')), 64)]",
            "dataCollectionRuleChangeTrackingLiteDeploymentName": "[take(concat('alz-DataCollectionRuleChangeTrackingLite', variables('deploymentSuffix')), 64)]",
            "dataCollectionRuleMdfcDefenderSQLLiteDeploymentName": "[take(concat('alz-DataCollectionRuleDefenderSQLLite', variables('deploymentSuffix')), 64)]",
            "userAssignedIdentityLiteDeploymentName": "[take(concat('alz-UserAssignedIdentityLite', variables('deploymentSuffix')), 60)]"
        },
        // Declaring deterministic names for Resource Groups that will be created for platform resources
        "platformRgNames": {
            "mgmtRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-mgmt')]",
            "connectivityRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnethub-', parameters('connectivityLocation'))]",
            "connectivityRgSecondary": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnethub-', parameters('connectivityLocationSecondary'))]",
            "ddosRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-ddos')]",
            "privateDnsRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-privatedns')]",
            "privateDnsRg2": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-privatedns-02')]",
            "identityVnetRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('connectivityLocation'))]",
            "identityVnetRgSecondary": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('connectivityLocationSecondary'))]",
            "lzVnetRg": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('connectivityLocation'))]"
        },
        // Declaring deterministic names for platform resources that will be created
        "platformResourceNames": {
            "logAnalyticsWorkspace": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-law')]",
            "dataCollectionRuleVmInsights": "[concat('dcr-vminsights-prod-', parameters('connectivityLocation'), '-001')]",
            "dataCollectionRuleChangeTracking": "[concat('dcr-changetracking-prod-', parameters('connectivityLocation'), '-001')]",
            "dataCollectionRuleMdfcDefenderSql": "[concat('dcr-defendersql-prod-', parameters('connectivityLocation'), '-001')]",
            "userAssignedIdentity": "[concat('id-ama-prod-', parameters('connectivityLocation'), '-001')]",
            "automationAccount": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-aauto')]",
            "vpnGwName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vpngw-', parameters('connectivityLocation'))]",
            "erGwName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-ergw-', parameters('connectivityLocation'))]",
            "ddosName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-ddos-', parameters('connectivityLocation'))]",
            "azFwPolicyName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-azfwpolicy-', parameters('connectivityLocation'))]",
            "azFwName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-fw-', parameters('connectivityLocation'))]",
            "azFwNameSecondary": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-fw-', parameters('connectivityLocationSecondary'))]",
            "azErGwIpName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-erpip-', parameters('connectivityLocation'))]",
            "hubName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-hub-', parameters('connectivityLocation'))]",
            "hubNameSecondary": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-hub-', parameters('connectivityLocationSecondary'))]",
            "vwanName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vwan-', parameters('connectivityLocation'))]",
            "azVpnGwIpName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-gwpip-', parameters('connectivityLocation'))]",
            "azFwIpName": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-fwpip-', parameters('connectivityLocation'))]",
            "identityVnet": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('connectivityLocation'))]",
            "identityVnetSecondary": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('connectivityLocationSecondary'))]",
            "lzVnet": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnet-', parameters('connectivityLocation'))]"
        },
        // Declaring deterministic resourceId's for platform resources that will be created
        "singleVsDedicatedMgmtSub": "[if(empty(parameters('managementSubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('managementSubscriptionId'))]",
        "singleVsDedicatedConnectivitySub": "[if(empty(parameters('connectivitySubscriptionId')), parameters('singlePlatformSubscriptionId'), parameters('connectivitySubscriptionId'))]",
        "platformResourceIds": {
            "logAnalyticsResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.OperationalInsights/workspaces/', variables('platformResourceNames').logAnalyticsWorkspace)]",
            "dataCollectionRuleVmInsightsResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.Insights/dataCollectionRules/', variables('platformResourceNames').dataCollectionRuleVmInsights)]",
            "dataCollectionRuleChangeTrackingResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.Insights/dataCollectionRules/', variables('platformResourceNames').dataCollectionRuleChangeTracking)]",
            "dataCollectionRuleMdfcDefenderSQLResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.Insights/dataCollectionRules/', variables('platformResourceNames').dataCollectionRuleMdfcDefenderSql)]",
            "automationResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.Automation/automationAccounts/', variables('platformResourceNames').automationAccount)]",
            "ddosProtectionResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').ddosRg, '/providers/Microsoft.Network/ddosProtectionPlans/', variables('platformResourceNames').ddosName)]",
            "vNetHubResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/virtualNetworks/', variables('platformResourceNames').hubName)]",
            "vNetHubResourceIdSecondary": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRgSecondary, '/providers/Microsoft.Network/virtualNetworks/', variables('platformResourceNames').hubNameSecondary)]",
            "vWanHubResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/virtualHubs/', variables('platformResourceNames').hubName)]",
            "vWanHubResourceIdSecondary": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/virtualHubs/', variables('platformResourceNames').hubNameSecondary)]",
            "privateDnsRgResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').privateDnsRg)]",
            "azFirewallResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/azureFirewalls/', variables('platformResourceNames').azFwName)]",
            "azFirewallResourceIdSecondary": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRgSecondary, '/providers/Microsoft.Network/azureFirewalls/', variables('platformResourceNames').azFwNameSecondary)]",
            "azFirewallResourceIdSecondaryVwan": "[concat('/subscriptions/', variables('singleVsDedicatedConnectivitySub'), '/resourceGroups/', variables('platformRgNames').connectivityRg, '/providers/Microsoft.Network/azureFirewalls/', variables('platformResourceNames').azFwNameSecondary)]",
            "userAssignedIdentityResourceId": "[concat('/subscriptions/', variables('singleVsDedicatedMgmtSub'), '/resourceGroups/', variables('platformRgNames').mgmtRg, '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/', variables('platformResourceNames').userAssignedIdentity)]"
        },
        // Declaring deterministic resourceId's for ES Lite platform resources (as they will be consolidated into a single platform subscription)
        "deterministicRoleAssignmentGuids": {
            "ddosForConnectivity": "[take(guid(concat(parameters('enterpriseScaleCompanyPrefix'), 'ddos')), 10)]",
            "backupForIdentity": "[take(guid(concat(parameters('enterpriseScaleCompanyPrefix'), 'idbackup')), 10)]"
        },
        "privateDnsZones": "[array(parameters('privateDnsZonesToDeploy'))]",
        "azBackupGeoCodes": {
            "australiacentral": "acl",
            "australiacentral2": "acl2",
            "australiaeast": "ae",
            "australiasoutheast": "ase",
            "brazilsouth": "brs",
            "brazilsoutheast": "bse",
            "centraluseuap": "ccy",
            "canadacentral": "cnc",
            "canadaeast": "cne",
            "centralus": "cus",
            "eastasia": "ea",
            "eastus2euap": "ecy",
            "eastus": "eus",
            "eastus2": "eus2",
            "francecentral": "frc",
            "francesouth": "frs",
            "germanynorth": "gn",
            "germanywestcentral": "gwc",
            "centralindia": "inc",
            "southindia": "ins",
            "westindia": "inw",
            "italynorth": "itn",
            "japaneast": "jpe",
            "japanwest": "jpw",
            "jioindiacentral": "jic",
            "jioindiawest": "jiw",
            "koreacentral": "krc",
            "koreasouth": "krs",
            "northcentralus": "ncus",
            "northeurope": "ne",
            "norwayeast": "nwe",
            "norwaywest": "nww",
            "qatarcentral": "qac",
            "southafricanorth": "san",
            "southafricawest": "saw",
            "southcentralus": "scus",
            "swedencentral": "sdc",
            "swedensouth": "sds",
            "southeastasia": "sea",
            "switzerlandnorth": "szn",
            "switzerlandwest": "szw",
            "uaecentral": "uac",
            "uaenorth": "uan",
            "uksouth": "uks",
            "ukwest": "ukw",
            "westcentralus": "wcus",
            "westeurope": "we",
            "westus": "wus",
            "westus2": "wus2",
            "westus3": "wus3",
            "usdodcentral": "udc",
            "usdodeast": "ude",
            "usgovarizona": "uga",
            "usgoviowa": "ugi",
            "usgovtexas": "ugt",
            "usgovvirginia": "ugv",
            "usnateast": "exe",
            "usnatwest": "exw",
            "usseceast": "rxe",
            "ussecwest": "rxw",
            "chinanorth": "bjb",
            "chinanorth2": "bjb2",
            "chinanorth3": "bjb3",
            "chinaeast": "sha",
            "chinaeast2": "sha2",
            "chinaeast3": "sha3",
            "germanycentral": "gec",
            "germanynortheast": "gne"
        },
        "privateDnsZonesMerge": "[if(and(contains(variables('azBackupGeoCodes'), parameters('connectivityLocation')), contains(variables('privateDnsZones'), 'privatelink.regionGeoShortCode.backup.windowsazure.com')), union(createArray(replace(variables('privateDnsZones')[0], '.regionGeoShortCode.', concat('.', variables('azBackupGeoCodes')[toLower(parameters('connectivityLocation'))], '.'))), variables('privateDnsZones')), variables('privateDnsZones'))]",
        "privateDnsZonesMergedWithBackupPlaceholderRemoved": "[filter(variables('privateDnsZonesMerge'), lambda('i', not(equals(lambdaVariables('i'), 'privatelink.regionGeoShortCode.backup.windowsazure.com'))))]",
        "subscriptionIds": "[union(parameters('onlineLzSubscriptionId'), parameters('corpLzSubscriptionId'), map(parameters('corpConnectedLzSubscriptionId'), lambda('sub', lambdaVariables('sub').subs)), if(empty(parameters('singlePlatformSubscriptionId')), if(empty(parameters('connectivitySubscriptionId')), createArray(parameters('managementSubscriptionId'), parameters('identitySubscriptionId')), createArray(parameters('managementSubscriptionId'), parameters('connectivitySubscriptionId'), parameters('identitySubscriptionId'))), createArray(parameters('singlePlatformSubscriptionId'))))]",
        "roleDefinitions": {
            "networkContributor": "4d97b98b-1d4f-4787-a291-c67834d212e7"
        },
        "cuaid": "35c42e79-00b3-42eb-a9ac-e542953efb3c",
        "cuaidSinglePlatformSub": "b35a8452-8a67-49f9-b1a9-1aee3c1a13c2",
        "cuaidMultiPlatformSubs": "725aea60-cfaa-4a0c-9fe7-71b07f53803d",
        "cuaidNetworkingNone": "35c1ce02-165f-43b2-8d3a-fc68a04b802a",
        "cuaidNetworkingHubSpoke": "f7fcc714-0c0d-4011-87bf-319810bbb03d",
        "cuaidNetworkingVirtualWan": "0263335d-f570-470c-8389-aa6c916e5008",
        "ztnPhase1CuaId": "f09f64b8-5cb3-4b16-900d-6ba1df8a597e",
        "ambaPortalCuaId": "5f0e5693-3998-4ae2-8115-ee96e38dac62",
        "cuaidSecondaryRegion": "b8cb7850-a693-4b04-a3a8-5441491966d6"
    },
    "resources": [
        /*
            The following deployment will create the management group structure for ESLZ and ensure the sustainable, scalable architecture
        */
        {
            // Creating the ESLZ management group structure
            "condition": "[empty(parameters('singlePlatformSubscriptionId'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').mgmtGroupDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroups]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying ALZ Custom RBAC Role Definitions
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').roleDefsDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').roleDefinitions]"
                }
            }
        },
        /*
            The following deployments will deploy the required proactive and preventive Azure policies for ESLZ policy driven governance
        */
        {
            // Deploying ESLZ custom policies.
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').policyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').policyDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying ESLZ custom initiatives.
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').initiativeDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').initiativeDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            // Deploying AMBA custom policies. Note: These policies are pulled from AMBA remote repo (https://www.github.com/Azure/azure-monitor-baseline-alerts). See definition of deploymentUris.monitorPolicyDefinitions for more details
            "condition": "[and(empty(parameters('singlePlatformSubscriptionId')), equals(parameters('enableMonitorBaselines'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').monitorPolicyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitorPolicyDefinitions]"
                },
                "parameters": {
                    "enterpriseScaleCompanyPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "telemetryOptOut": {
                        "value": "[parameters('telemetryOptOut')]"
                    },
                    "platformManagementGroup": {
                        "value": "[variables('mgmtGroups').platform]"
                    },
                    "IdentityManagementGroup": {
                        "value": "[variables('mgmtGroups').identity]"
                    },
                    "managementManagementGroup": {
                        "value": "[variables('mgmtGroups').management]"
                    },
                    "connectivityManagementGroup": {
                        "value": "[variables('mgmtGroups').connectivity]"
                    },
                    "LandingZoneManagementGroup": {
                        "value": "[variables('mgmtGroups').lzs]"
                    },
                    "enableAMBAConnectivity": {
                        "value": "[parameters('enableMonitorConnectivity')]"
                    },
                    "enableAMBAIdentity": {
                        "value": "[parameters('enableMonitorIdentity')]"
                    },
                    "enableAMBAManagement": {
                        "value": "[parameters('enableMonitorManagement')]"
                    },
                    "enableAMBAServiceHealth": {
                        "value": "[parameters('enableServiceHealth')]"
                    },
                    "userAssignedManagedIdentityName": {
                        "value": "[parameters('userAssignedManagedIdentityName')]"
                    },
                    "ALZWebhookServiceUri": {
                        "value": "[array(parameters('ambaAgServiceHook'))]"
                    },
                    "ALZArmRoleId": {
                        "value": "[array(parameters('ambaAgArmRole'))]"
                    },
                    "delayCount": {
                        "value": "[parameters('delayCount')]"
                    },
                    "ALZMonitorResourceGroupName": {
                        "value": "[parameters('monitorAlertsResourceGroup')]"
                    },
                    "ALZMonitorResourceGroupLocation": {
                        "value": "[deployment().location]"
                    },
                    "ALZMonitorActionGroupEmail": {
                        "value": "[array(parameters('ambaAgEmailContact'))]"
                    },
                    "managementSubscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    },
                    "enableAMBAHybridVM": {
                        "value": "[parameters('enableAMBAHybridVM')]"
                    },
		            "enableAMBAKeyManagement": {
                        "value": "[parameters('enableAMBAKeyManagement')]"
                    },
		            "enableAMBALoadBalancing": {
                        "value": "[parameters('enableAMBALoadBalancing')]"
                    },
		            "enableAMBANetworkChanges": {
                        "value": "[parameters('enableAMBANetworkChanges')]"
                    },
		            "enableAMBARecoveryServices": {
                        "value": "[parameters('enableAMBARecoveryServices')]"
                    },
		            "enableAMBAStorage": {
                        "value": "[parameters('enableAMBAStorage')]"
                    },
		            "enableAMBAVM": {
                        "value": "[parameters('enableAMBAVM')]"
                    },
		            "enableAMBAWeb": {
                        "value": "[parameters('enableAMBAWeb')]"
                    },
                    "deployALZPortalAccelerator": {
                        "value": "Yes"
                    }
                }
            }
        },
        {
            /// Deploying AMBA custom policies. Note: These policies are pulled from AMBA remote repo (https://www.github.com/Azure/azure-monitor-baseline-alerts). See definition of deploymentUris.monitorPolicyDefinitions for more details
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableMonitorBaselines'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('esLiteDeploymentNames').monitorPolicyLiteDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitorPolicyDefinitions]"
                },
                "parameters": {
                    "enterpriseScaleCompanyPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "telemetryOptOut": {
                        "value": "[parameters('telemetryOptOut')]"
                    },
                    "platformManagementGroup": {
                        "value": "[variables('mgmtGroups').platform]"
                    },
                    "IdentityManagementGroup": {
                        "value": "[variables('mgmtGroups').platform]"
                    },
                    "managementManagementGroup": {
                        "value": "[variables('mgmtGroups').platform]"
                    },
                    "connectivityManagementGroup": {
                        "value": "[variables('mgmtGroups').platform]"
                    },
                    "LandingZoneManagementGroup": {
                        "value": "[variables('mgmtGroups').lzs]"
                    },
                    "enableAMBAConnectivity": {
                        "value": "[parameters('enableMonitorConnectivity')]"
                    },
                    "enableAMBAIdentity": {
                        "value": "[parameters('enableMonitorIdentity')]"
                    },
                    "enableAMBAManagement": {
                        "value": "[parameters('enableMonitorManagement')]"
                    },
                    "enableAMBAServiceHealth": {
                        "value": "[parameters('enableServiceHealth')]"
                    },
                    "userAssignedManagedIdentityName": {
                        "value": "[parameters('userAssignedManagedIdentityName')]"
                    },
                    "ALZWebhookServiceUri": {
                        "value": "[array(parameters('ambaAgServiceHook'))]"
                    },
                    "ALZArmRoleId": {
                        "value": "[array(parameters('ambaAgArmRole'))]"
                    },
                    "delayCount": {
                        "value": "[parameters('delayCount')]"
                    },
                    "ALZMonitorResourceGroupName": {
                        "value": "[parameters('monitorAlertsResourceGroup')]"
                    },
                    "ALZMonitorResourceGroupLocation": {
                        "value": "[deployment().location]"
                    },
                    "ALZMonitorActionGroupEmail": {
                        "value": "[array(parameters('ambaAgEmailContact'))]"
                    },
                    "managementSubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
		            "enableAMBALoadBalancing": {
                        "value": "[parameters('enableAMBALoadBalancing')]"
                    },
		            "enableAMBANetworkChanges": {
                        "value": "[parameters('enableAMBANetworkChanges')]"
                    },
		            "enableAMBARecoveryServices": {
                        "value": "[parameters('enableAMBARecoveryServices')]"
                    },
		            "enableAMBAStorage": {
                        "value": "[parameters('enableAMBAStorage')]"
                    },
		            "enableAMBAVM": {
                        "value": "[parameters('enableAMBAVM')]"
                    },
		            "enableAMBAWeb": {
                        "value": "[parameters('enableAMBAWeb')]"
                    },
                    "deployALZPortalAccelerator": {
                        "value": "Yes"
                    }
                }
            }
        },
        {
            // One of Azure's untold stories.....
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat('preparingToLaunch', copyIndex())]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[variables('deploymentNames').initiativeDeploymentName]"
            ],
            "copy": {
                "batchSize": 1,
                "count": "[parameters('delayCount')]",
                "mode": "Serial",
                "name": "policyCompletion"
            },
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [],
                    "outputs": {}
                }
            }
        },
        /*
            The following deployments will organize the dedicated platform subscriptions into their respective management groups
        */
        {
            // Placing management subscription into dedicated management group
            "condition": "[not(empty(parameters('managementSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').mgmtSubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').managementManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').management]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    }
                }
            }
        },
        {
            // Placing connectivity subscription into dedicated management group
            "condition": "[not(empty(parameters('connectivitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').connectivitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').connectivity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    }
                }
            }
        },
        {
            // Placing identity subscription into dedicated management group
            "condition": "[not(empty(parameters('identitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').identitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').identity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('identitySubscriptionId')]"
                    }
                }
            }
        },
        /*
            The following deployments will optionally configure the governance, security, and monitoring for the Azure platform and landing zones
        */
        {
            // Deploying Log Analytics workspace to management subscription if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').monitoringDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    },
                    "enableSentinel": {
                        "value": "[parameters('enableSentinel')]"
                    }
                }
            }
        },
        {
            // Deploying Data Collection Rule for VMInsights if condition is true
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmInsights'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').dataCollectionRuleVmInsightsDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').dataCollectionRuleVmInsights]"
                },
                "parameters": {
                    "WorkspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "WorkspaceLocation": {
                        "value": "[deployment().location]"
                    },
                    "userGivenDcrName": {
                        "value": "[variables('platformResourceNames').dataCollectionRuleVmInsights]"
                    }
                }
            }
        },
        {
            // Deploying Data Collection Rule for Change Tracking if condition is true
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableChangeTracking'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').dataCollectionRuleChangeTrackingDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').dataCollectionRuleChangeTracking]"
                },
                "parameters": {
                    "WorkspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "WorkspaceLocation": {
                        "value": "[deployment().location]"
                    },
                    "dataCollectionRuleName": {
                        "value": "[variables('platformResourceNames').dataCollectionRuleChangeTracking]"
                    }
                }
            }
        },
        {
            // Deploying Data Collection Rule for Mdfc Defender for SQL if condition is true
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAscForSqlOnVm'), 'DeployIfNotExists'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').dataCollectionRuleMdfcDefenderSQLDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').dataCollectionRuleMdfcDefenderSQL]"
                },
                "parameters": {
                    "WorkspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "WorkspaceLocation": {
                        "value": "[deployment().location]"
                    },
                    "userGivenDcrName": {
                        "value": "[variables('platformResourceNames').dataCollectionRuleMdfcDefenderSql]"
                    }
                }
            }
        },
        {
            // Deploying user assigned identity if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').userAssignedIdentityDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').userAssignedIdentity]"
                },
                "parameters": {
                    "location": {
                        "value": "[deployment().location]"
                    },
                    "userAssignedIdentityName": {
                        "value": "[variables('platformResourceNames').userAssignedIdentity]"
                    },
                    "userAssignedIdentityResourceGroup": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    }
                }
            }
        },
        {
            // Assigning Log Analytics workspace policy to management management group if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').logAnalyticsPolicyDeploymentName]",
            "scope": "[variables('scopes').managementManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logAnalyticsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "logAnalyticsWorkspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        {
            // Deploying Diagnostic Settings to management groups if Log Analytics was deployed via a loop
            "condition": "[and(empty(parameters('singlePlatformSubscriptionId')), not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('mgmtGroupsArray')[copyIndex()], variables('deploymentNames').diagnosticSettingsforMGsDeploymentName), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', variables('mgmtGroupsArray')[copyIndex()])]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "copy": {
                "name": "mgDiagSettings",
                "count": "[length(variables('mgmtGroupsArray'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').diagnosticSettingsforManagementGroups]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    }
                }
            }
        },
        {
            // Deploying Diagnostic Settings to ESLite management groups if Log Analytics was deployed via a loop
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), empty(parameters('managementSubscriptionId')), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('mgmtGroupsESLiteArray')[copyIndex()], variables('deploymentNames').diagnosticSettingsforMGsDeploymentName), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', variables('mgmtGroupsESLiteArray')[copyIndex()])]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "copy": {
                "name": "mgDiagSettings",
                "count": "[length(variables('mgmtGroupsESLiteArray'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').diagnosticSettingsforManagementGroups]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    }
                }
            }
        },
        {
            // Assigning Microsoft Cloud Security Benchmark policy to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), or(equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAsc'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').asbPolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').asbPolicyInitiative]"
                },
                "parameters": {}
            }
        },
        {
            // Assigning Workload Specific Customer Managed Keys Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsCMKInitiatives'), 'Yes'), not(empty(parameters('wsCMKSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsCMKDeploymentName, '-', replace(parameters('wsCMKSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsCMKSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsCMKmg",
                "count": "[length(parameters('wsCMKSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsCMKPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific APIM Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsAPIMInitiatives'), 'Yes'), not(empty(parameters('wsAPIMSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsAPIMDeploymentName, '-', replace(parameters('wsAPIMSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsAPIMSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsAPIMmg",
                "count": "[length(parameters('wsAPIMSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsAPIMPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific App Services Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsAppServicesInitiatives'), 'Yes'), not(empty(parameters('wsAppServicesSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsAppServicesDeploymentName, '-', replace(parameters('wsAppServicesSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsAppServicesSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsAppServicesmg",
                "count": "[length(parameters('wsAppServicesSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsAppServicesPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Automation Accounts Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsAutomationInitiatives'), 'Yes'), not(empty(parameters('wsAutomationSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsAutomationDeploymentName, '-', replace(parameters('wsAutomationSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsAutomationSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsAutomationmg",
                "count": "[length(parameters('wsAutomationSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsAutomationPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Bot Service Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsBotServiceInitiatives'), 'Yes'), not(empty(parameters('wsBotServiceSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsBotServiceDeploymentName, '-', replace(parameters('wsBotServiceSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsBotServiceSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsAutomationmg",
                "count": "[length(parameters('wsBotServiceSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsBotServicePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Cognitive Services Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsCognitiveServicesInitiatives'), 'Yes'), not(empty(parameters('wsCognitiveServicesSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsCognitiveServicesDeploymentName, '-', replace(parameters('wsCognitiveServicesSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsCognitiveServicesSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsCognitiveServicesmg",
                "count": "[length(parameters('wsCognitiveServicesSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsCognitiveServicesPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Compute Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsComputeInitiatives'), 'Yes'), not(empty(parameters('wsComputeSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsComputeDeploymentName, '-', replace(parameters('wsComputeSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsComputeSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsComputemg",
                "count": "[length(parameters('wsComputeSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsComputePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Container Apps Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsContainerAppsInitiatives'), 'Yes'), not(empty(parameters('wsContainerAppsSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsContainerAppsDeploymentName, '-', replace(parameters('wsContainerAppsSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsContainerAppsSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsContainerAppsmg",
                "count": "[length(parameters('wsContainerAppsSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsContainerAppsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Container Instance Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsContainerInstanceInitiatives'), 'Yes'), not(empty(parameters('wsContainerInstanceSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsContainerInstanceDeploymentName, '-', replace(parameters('wsContainerInstanceSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsContainerInstanceSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsContainerInstancemg",
                "count": "[length(parameters('wsContainerInstanceSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsContainerInstancePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Container Registry Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsContainerRegistryInitiatives'), 'Yes'), not(empty(parameters('wsContainerRegistrySelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsContainerRegistryDeploymentName, '-', replace(parameters('wsContainerRegistrySelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsContainerRegistrySelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsContainerRegistrymg",
                "count": "[length(parameters('wsContainerRegistrySelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsContainerRegistryPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Cosmos DB Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsCosmosDbInitiatives'), 'Yes'), not(empty(parameters('wsCosmosDbSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsCosmosDbDeploymentName, '-', replace(parameters('wsCosmosDbSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsCosmosDbSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsCosmosDbmg",
                "count": "[length(parameters('wsCosmosDbSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsCosmosDbPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Data Explorer Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsDataExplorerInitiatives'), 'Yes'), not(empty(parameters('wsDataExplorerSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsDataExplorerDeploymentName, '-', replace(parameters('wsDataExplorerSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsDataExplorerSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsDataExplorermg",
                "count": "[length(parameters('wsDataExplorerSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsDataExplorerPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Data Factory Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsDataFactoryInitiatives'), 'Yes'), not(empty(parameters('wsDataFactorySelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsDataFactoryDeploymentName, '-', replace(parameters('wsDataFactorySelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsDataFactorySelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsDataFactorymg",
                "count": "[length(parameters('wsDataFactorySelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsDataFactoryPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Event Grid Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsEventGridInitiatives'), 'Yes'), not(empty(parameters('wsEventGridSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsEventGridDeploymentName, '-', replace(parameters('wsEventGridSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsEventGridSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsEventGridmg",
                "count": "[length(parameters('wsEventGridSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsEventGridPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Event Hub Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsEventHubInitiatives'), 'Yes'), not(empty(parameters('wsEventHubSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsEventHubDeploymentName, '-', replace(parameters('wsEventHubSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsEventHubSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsEventHubmg",
                "count": "[length(parameters('wsEventHubSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsEventHubPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Key Vault Supplementary Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsKeyVaultSupInitiatives'), 'Yes'), not(empty(parameters('wsKeyVaultSupSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsKeyVaultSupDeploymentName, '-', replace(parameters('wsKeyVaultSupSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsKeyVaultSupSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsKeyVaultSupmg",
                "count": "[length(parameters('wsKeyVaultSupSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsKeyVaultSupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Kubernetes Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsKubernetesInitiatives'), 'Yes'), not(empty(parameters('wsKubernetesSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsKubernetesDeploymentName, '-', replace(parameters('wsKubernetesSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsKubernetesSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsKubernetessmg",
                "count": "[length(parameters('wsKubernetesSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsKubernetesPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Machine Learning Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsMachineLearningInitiatives'), 'Yes'), not(empty(parameters('wsMachineLearningSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsMachineLearningDeploymentName, '-', replace(parameters('wsMachineLearningSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsMachineLearningSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsMachineLearningsmg",
                "count": "[length(parameters('wsMachineLearningSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsMachineLearningPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific MySQL Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsMySQLInitiatives'), 'Yes'), not(empty(parameters('wsMySQLSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsMySQLDeploymentName, '-', replace(parameters('wsMySQLSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsMySQLSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsMySQLmg",
                "count": "[length(parameters('wsMySQLSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsMySQLPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Network and Networking services Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsNetworkInitiatives'), 'Yes'), not(empty(parameters('wsNetworkSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsNetworkDeploymentName, '-', replace(parameters('wsNetworkSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsNetworkSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsNetworkmg",
                "count": "[length(parameters('wsNetworkSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsNetworkPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific OpenAI Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsOpenAIInitiatives'), 'Yes'), not(empty(parameters('wsOpenAISelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsOpenAIDeploymentName, '-', replace(parameters('wsOpenAISelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsOpenAISelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsOpenAImg",
                "count": "[length(parameters('wsOpenAISelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsOpenAIPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific PostgreSQL Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsPostgreSQLInitiatives'), 'Yes'), not(empty(parameters('wsPostgreSQLSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsPostgreSQLDeploymentName, '-', replace(parameters('wsPostgreSQLSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsPostgreSQLSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsPostgreSQLmg",
                "count": "[length(parameters('wsPostgreSQLSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsPostgreSQLPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Service Bus Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsServiceBusInitiatives'), 'Yes'), not(empty(parameters('wsServiceBusSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsServiceBusDeploymentName, '-', replace(parameters('wsServiceBusSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsServiceBusSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsServiceBusmg",
                "count": "[length(parameters('wsServiceBusSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsServiceBusPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific SQL Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsSQLInitiatives'), 'Yes'), not(empty(parameters('wsSQLSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsSQLDeploymentName, '-', replace(parameters('wsSQLSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsSQLSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsSQLmg",
                "count": "[length(parameters('wsSQLSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsSQLPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Storage Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsStorageInitiatives'), 'Yes'), not(empty(parameters('wsStorageSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsStorageDeploymentName, '-', replace(parameters('wsStorageSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsStorageSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsStoragemg",
                "count": "[length(parameters('wsStorageSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsStoragePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Synapse Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsSynapseInitiatives'), 'Yes'), not(empty(parameters('wsSynapseSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsSynapseDeploymentName, '-', replace(parameters('wsSynapseSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsSynapseSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsSynapsemg",
                "count": "[length(parameters('wsSynapseSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsSynapsePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Workload Specific Virtual Desktop Initiaitve to selected management groups if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableWsVirtualDesktopInitiatives'), 'Yes'), not(empty(parameters('wsVirtualDesktopSelectorMG'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').wsVirtualDesktopDeploymentName, '-', replace(parameters('wsVirtualDesktopSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('wsVirtualDesktopSelectorMG')[copyIndex()], 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "wsVirtualDesktopmg",
                "count": "[length(parameters('wsVirtualDesktopSelectorMG'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').wsVirtualDesktopPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "assignmentIndex": {
                        "value": "[copyIndex()]"
                    }
                }
            }
        },
        {
            // Assigning Regulatory Compliance polices to desired management groups if condition is true
            "condition": "[not(empty(parameters('regulatoryComplianceInitativesToAssign')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[take(concat(variables('deploymentNames').regulatoryComplianceInitativesToAssignDeploymentName, if(contains(parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].mg, '-'), split(parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].mg, '-')[1], parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].mg), '-', uniqueString(parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].mg, parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].policy.id)), 64)]",
            "scope": "[concat('Microsoft.Management/managementGroups/', replace(parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].mg, 'contoso', parameters('enterpriseScaleCompanyPrefix')))]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').initiativeDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "regCompAssignments",
                "count": "[length(parameters('regulatoryComplianceInitativesToAssign'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').regulatoryComplianceInitaitves]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "policySetDefinitionId": {
                        "value": "[parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].policy.id]"
                    },
                    "policySetDefinitionDisplayName": {
                        "value": "[parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].policy.displayName]"
                    },
                    "policySetDefinitionDescription": {
                        "value": "[parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].policy.description]"
                    },
                    "policyAssignmentName": {
                        "value": "[take(concat('Enforce-RegComp-',uniqueString(replace(parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].mg, 'contoso', parameters('enterpriseScaleCompanyPrefix')), parameters('regulatoryComplianceInitativesToAssign')[copyIndex()].policy.id)), 24)]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "regCompPolParAusGovIsmRestrictedVmAdminsExclude": {
                        "value": "[parameters('regCompPolParAusGovIsmRestrictedVmAdminsExclude')]"
                    },
                    "regCompPolParAusGovIsmRestrictedResourceTypes": {
                        "value": "[parameters('regCompPolParAusGovIsmRestrictedResourceTypes')]"
                    },
                    "regCompPolParMPAACertificateThumb": {
                        "value": "[parameters('regCompPolParMPAACertificateThumb')]"
                    },
                    "regCompPolParMPAAApplicationName": {
                        "value": "[parameters('regCompPolParMPAAApplicationName')]"
                    },
                    "regCompPolParMPAAStoragePrefix": {
                        "value": "[parameters('regCompPolParMPAAStoragePrefix')]"
                    },
                    "regCompPolParMPAAResGroupPrefix": {
                        "value": "[parameters('regCompPolParMPAAResGroupPrefix')]"
                    },
                    "regCompPolParMPAARBatchMetricName": {
                        "value": "[parameters('regCompPolParMPAARBatchMetricName')]"
                    },
                    "regCompPolParSovBaseConfRegions": {
                        "value": "[parameters('regCompPolParSovBaseConfRegions')]"
                    },
                    "regCompPolParSovBaseGlobalRegions": {
                        "value": "[parameters('regCompPolParSovBaseGlobalRegions')]"
                    },
                    "regCompPolParSwift2020VmAdminsInclude": {
                        "value": "[parameters('regCompPolParSwift2020VmAdminsInclude')]"
                    },
                    "regCompPolParSwift2020DomainFqdn": {
                        "value": "[parameters('regCompPolParSwift2020DomainFqdn')]"
                    },
                    "regCompPolParCanadaFedPbmmVmAdminsInclude": {
                        "value": "[parameters('regCompPolParCanadaFedPbmmVmAdminsInclude')]"
                    },
                    "regCompPolParCanadaFedPbmmVmAdminsExclude": {
                        "value": "[parameters('regCompPolParCanadaFedPbmmVmAdminsExclude')]"
                    },
                    "regCompPolParCisV2KeyVaultKeysRotateDays": {
                        "value": "[parameters('regCompPolParCisV2KeyVaultKeysRotateDays')]"
                    },
                    "regCompPolParCmmcL3VmAdminsInclude": {
                        "value": "[parameters('regCompPolParCmmcL3VmAdminsInclude')]"
                    },
                    "regCompPolParCmmcL3VmAdminsExclude": {
                        "value": "[parameters('regCompPolParCmmcL3VmAdminsExclude')]"
                    },
                    "regCompPolParHitrustHipaaApplicationName": {
                        "value": "[parameters('regCompPolParHitrustHipaaApplicationName')]"
                    },
                    "regCompPolParHitrustHipaaStoragePrefix": {
                        "value": "[parameters('regCompPolParHitrustHipaaStoragePrefix')]"
                    },
                    "regCompPolParHitrustHipaaResGroupPrefix": {
                        "value": "[parameters('regCompPolParHitrustHipaaResGroupPrefix')]"
                    },
                    "regCompPolParHitrustHipaaCertificateThumb": {
                        "value": "[parameters('regCompPolParHitrustHipaaCertificateThumb')]"
                    },
                    "regCompPolParIrs1075Sep2016VmAdminsExclude": {
                        "value": "[parameters('regCompPolParIrs1075Sep2016VmAdminsExclude')]"
                    },
                    "regCompPolParIrs1075Sep2016VmAdminsInclude": {
                        "value": "[parameters('regCompPolParIrs1075Sep2016VmAdminsInclude')]"
                    },
                    "regCompPolParNZIsmRestrictedVmAdminsInclude": {
                        "value": "[parameters('regCompPolParNZIsmRestrictedVmAdminsInclude')]"
                    },
                    "regCompPolParNZIsmRestrictedVmAdminsExclude": {
                        "value": "[parameters('regCompPolParNZIsmRestrictedVmAdminsExclude')]"
                    },
                    "regCompPolParNistSp800171R2VmAdminsExclude": {
                        "value": "[parameters('regCompPolParNistSp800171R2VmAdminsExclude')]"
                    },
                    "regCompPolParNistSp800171R2VmAdminsInclude": {
                        "value": "[parameters('regCompPolParNistSp800171R2VmAdminsInclude')]"
                    },
                    "regCompPolParSoc2Type2AllowedRegistries": {
                        "value": "[parameters('regCompPolParSoc2Type2AllowedRegistries')]"
                    },
                    "regCompPolParSoc2Type2MaxCpuUnits": {
                        "value": "[parameters('regCompPolParSoc2Type2MaxCpuUnits')]"
                    },
                    "regCompPolParSoc2Type2MaxMemoryBytes": {
                        "value": "[parameters('regCompPolParSoc2Type2MaxMemoryBytes')]"
                    }
                }
            }
        },
        {
            // Assigning Azure Monitor Resource Diagnostics policy to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceDiagnosticsInitiative]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "laCategory": {
                        "value": "[parameters('laCategory')]"
                    }
                }
            }
        },
        {
            // Assigning Azure Activity Diagnostics Log policy to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').activityDiagnosticsPolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').activityDiagnosticsPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            // Assigning Cost Optimization policy initiative to intermediate root management group
            "condition": "[or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').costOptimizationDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').costOptimizationPolicyInitiative]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            // Assigning Trusted Launch policy initiative to intermediate root management group
            "condition": "[or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').trustedLaunchDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').trustedLaunchPolicyInitiative]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            // Assigning Zone Resilient policy initiative to intermediate root management group
            "condition": "[or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').zoneResilientDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').zoneResilientPolicyInitiative]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning Audit resource location matches resource group location policy to intermediate root management group
            "condition": "[or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').resourceRgLocationDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceRgLocationPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning Microsoft Defender for Cloud configurations to subscriptions if condition is true (not policy)
            "condition": "[and(equals(parameters('enableAsc'), 'Yes'), not(empty(variables('subscriptionIds'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').MDFCSubscriptionEnableDeploymentName, copyIndex())]",
            "subscriptionId": "[variables('subscriptionIds')[copyIndex()]]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').platformLiteSubscriptionPlacement)]",
                "onlineLzs",
                "corpLzs",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "MDFCSubscriptionEnable",
                "count": "[length(variables('subscriptionIds'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').MDFCSubscriptionEnablement]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "resourceGroupLocation": {
                        "value": "[deployment().location]"
                    },
                    "resourceGroupName": {
                        "value": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-asc-export')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForContainers": {
                        "value": "[parameters('enableAscForContainers')]"
                    },
                    "enableAscForKeyVault": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "enableAscForSqlOnVm": {
                        "value": "[parameters('enableAscForSqlOnVm')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForApis": {
                        "value": "[parameters('enableAscForApis')]"
                    },
                    "enableAscForCspm": {
                        "value": "[parameters('enableAscForCspm')]"
                    },
                    "enableAscForOssDb": {
                        "value": "[parameters('enableAscForOssDb')]"
                    },
                    "enableAscForCosmosDbs": {
                        "value": "[parameters('enableAscForCosmosDbs')]"
                    }
                }
            }
        },
        {
            // Assigning Azure Security Center configuration policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.azure.com/'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ascPolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').mdfcConfigPolicyInitiative]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForServersVulnerabilityAssessments": {
                        "value": "[parameters('enableAscForServersVulnerabilityAssessments')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForContainers": {
                        "value": "[parameters('enableAscForContainers')]"
                    },
                    "enableAscForKeyVault": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "enableAscForSqlOnVm": {
                        "value": "[parameters('enableAscForSqlOnVm')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForCspm": {
                        "value": "[parameters('enableAscForCspm')]"
                    },
                    "enableAscForOssDb": {
                        "value": "[parameters('enableAscForOssDb')]"
                    },
                    "enableAscForCosmosDbs": {
                        "value": "[parameters('enableAscForCosmosDbs')]"
                    }
                }
            }
        },
        {
            // Assigning Azure Security Center for Open Source Databases configuration policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.azure.com/'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').atpOssDbPolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').atpOssDbPolicyInitiative]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableAscForOssDb'), 'DeployIfNotExists'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Azure Security Center for Azure SQL, MI and Synapse Databases configuration policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.azure.com/'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').atpSqlDbPolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').atpSqlDbPolicyInitiative]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableAscForSql'), 'DeployIfNotExists'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Microsoft Defender for Endpoints policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.azure.com/'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').mdEndpointsDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').mdEnpointsPolicyInitiative]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableMDEndpoints'), 'DeployIfNotExists'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning NEW Microsoft Defender for Endpoints policy initiative to intermediate root management group if condition is true: https://www.azadvertizer.net/azpolicyinitiativesadvertizer/77b391e3-2d5d-40c3-83bf-65c846b3c6a3.html
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.azure.com/'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').mdEndpointsAMADeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').mdEnpointsAMAPolicyInitiative]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableMDEndpoints'), 'DeployIfNotExists'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Deny Classic Resource Creation policy to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), not(equals(parameters('denyClassicResources'), 'No')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').denyClassicResourcePolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments',variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').classicResourcesPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    },
                    "policyEffect": {
                        "value": "[if(equals(parameters('denyClassicResources'), 'Yes'), 'Deny', 'Audit')]"
                    }
                }
            }
        },
        {
            // Assigning Deny VM Unmanaged Disk Creation policy to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), not(equals(parameters('denyVMUnmanagedDisk'), 'No')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').denyVMUnmanagedDiskPolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').VMUnmanagedDiskPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyVMUnmanagedDisk'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Az Gov Only - Assigning Azure Security Center configuration policy initiative to intermediate root management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableAsc'), 'Yes'), equals(environment().resourceManager, 'https://management.usgovcloudapi.net'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ascGovPolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').govMdfcPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForContainers": {
                        "value": "[parameters('enableAscForContainers')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    }
                }
            }
        },
        {
            // Assigning Do not allow deletion of resource type Policy to the platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('singlePlatformSubscriptionId'))), not(empty(parameters('managementSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').denyActionDeleteUAMIAMAPolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').denyActionDeleteUAMIAMAPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "resourceName": {
                        "value": "[variables('platformResourceNames').userAssignedIdentity]"
                    },
                    "resourceType": {
                        "value": "Microsoft.ManagedIdentity/userAssignedIdentities"
                    }
                }
            }
        },
        /*
            The following optional deployment will configure virtual network hub into the connectivity subscription
        */
        {
            // Creating resource group for DDoS Network Protection
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosRgDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').ddosRg]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    }
                }
            }
        },
        {
            // Creating DDoS protection plan into the connectivity subscription
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').ddosRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosProtection]"
                },
                "parameters": {
                    "ddosName": {
                        "value": "[variables('platformResourceNames').ddosName]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    }
                }
            }
        },
        {
            // Assigning DDoS Policy to enforce DDoS on virtual networks if condition evaluates to true
            "condition": "[and(or(equals(parameters('enableDdoS'), 'Yes'), equals(parameters('enableDdoS'), 'Audit')), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosHubPolicyDeploymentName]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosPolicyAssignment]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').ddosForConnectivity]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableDdoS'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Creating the virtual network hub (hub and spoke)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))), equals(parameters('enableHub'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').vnetConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "subnetMaskForAzFwMgmt": {
                        "value": "[parameters('subnetMaskForAzFwMgmt')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "enableVpnActiveActive": {
                        "value": "[parameters('enableVpnActiveActive')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },
        {
            // Creating the virtual network hub (with NVA)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'nva'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').nvaConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nvaConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "enableVpnActiveActive": {
                        "value": "[parameters('enableVpnActiveActive')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },
        {
            // Creating the VWAN network hub (Microsoft managed)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'vwan'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').vwanConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vwanConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "expressRouteScaleUnit": {
                        "value": "[parameters('expressRouteScaleUnit')]"
                    },
                    "vpnGateWayScaleUnit": {
                        "value": "[parameters('vpnGateWayScaleUnit')]"
                    },
                    "enablevWANRoutingIntent": {
                        "value": "[parameters('enablevWANRoutingIntent')]"
                    },
                    "internetTrafficRoutingPolicy": {
                        "value": "[parameters('internetTrafficRoutingPolicy')]"
                    },
                    "privateTrafficRoutingPolicy": {
                        "value": "[parameters('privateTrafficRoutingPolicy')]"
                    },
                    "vWANHubRoutingPreference": {
                        "value": "[parameters('vWANHubRoutingPreference')]"
                    },
                    "vWanHubCapacity": {
                        "value": "[parameters('vWANHubCapacity')]"
                    },
                    "enableHubSecondary": {
                        "value": "[parameters('enableSecondaryRegion')]"
                    },
                    "enableAzFwSecondary": {
                        "value": "[parameters('enableAzFwSecondary')]"
                    },
                    "firewallSkuSecondary": {
                        "value": "[parameters('firewallSkuSecondary')]"
                    },
                    "firewallZonesSecondary": {
                        "value": "[parameters('firewallZonesSecondary')]"
                    },
                    "enableAzFwDnsProxySecondary": {
                        "value": "[parameters('enableAzFwDnsProxySecondary')]"
                    },
                    "addressPrefixSecondary": {
                        "value": "[parameters('addressPrefixSecondary')]"
                    },
                    "enableVpnGwSecondary": {
                        "value": "[parameters('enableVpnGwSecondary')]"
                    },
                    "enableErGwSecondary": {
                        "value": "[parameters('enableErGwSecondary')]"
                    },
                    "locationSecondary": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "expressRouteScaleUnitSecondary": {
                        "value": "[parameters('expressRouteScaleUnitSecondary')]"
                    },
                    "vpnGateWayScaleUnitSecondary": {
                        "value": "[parameters('vpnGateWayScaleUnitSecondary')]"
                    },
                    "enablevWANRoutingIntentSecondary": {
                        "value": "[parameters('enablevWANRoutingIntentSecondary')]"
                    },
                    "internetTrafficRoutingPolicySecondary": {
                        "value": "[parameters('internetTrafficRoutingPolicySecondary')]"
                    },
                    "privateTrafficRoutingPolicySecondary": {
                        "value": "[parameters('privateTrafficRoutingPolicySecondary')]"
                    },
                    "vWANHubRoutingPreferenceSecondary": {
                        "value": "[parameters('vWANHubRoutingPreferenceSecondary')]"
                    },
                    "vWANHubCapacitySecondary": {
                        "value": "[parameters('vWANHubCapacitySecondary')]"
                    }
                }
            }
        },
        {
            // Creating resource group for Private DNS Zones
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').privateDnsZoneRgDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').privateDnsRg]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    }
                }
            }
        },
        {
            // Creating Private DNS Zones into the connectivity subscription and linking them to a secondary location if provided.
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').privateDnsZonesDeploymentName, copyIndex())]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').privateDnsRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsZoneRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHub2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHub2DeploymentName)]"
            ],
            "copy": {
                "name": "dnsZones",
                "count": "[length(variables('privateDnsZonesMergedWithBackupPlaceholderRemoved'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZones]"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[concat(variables('privateDnsZonesMergedWithBackupPlaceholderRemoved')[copyIndex()])]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "connectivityHubResourceIdSecondary": {
                        "value": "[variables('platformResourceIds').vNetHubResourceIdSecondary]"
                    },
                    "enablePrivateDnsZonesSecondary": {
                        "value": "[parameters('enablePrivateDnsZonesSecondary')]"
                    },
                    "enableHubSecondary": {
                        "value": "[parameters('enableSecondaryRegion')]"
                    }
                }
                }
            },
            {
                // Creating resource group for Private DNS Zones for a secondary region
                "condition": "[and(equals(parameters('enablePrivateDnsZonesSecondary'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
                "type": "Microsoft.Resources/deployments",
                "apiVersion": "2020-10-01",
                "name": "[variables('deploymentNames').privateDnsZoneRg2DeploymentName]",
                "subscriptionId": "[parameters('connectivitySubscriptionId')]",
                "location": "[deployment().location]",
                "dependsOn": [
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHub2DeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHub2DeploymentName)]"
                ],
                "properties": {
                    "mode": "Incremental",
                    "templateLink": {
                        "contentVersion": "1.0.0.0",
                        "uri": "[variables('deploymentUris').resourceGroup]"
                    },
                    "parameters": {
                        "rgName": {
                            "value": "[variables('platformRgNames').privateDnsRg2]"
                        },
                        "location": {
                            "value": "[parameters('connectivityLocationSecondary')]"
                        }
                    }
                }
            },
             {
                // Creating Private DNS Zones into the connectivity subscription for a secondary region
                "condition": "[and(equals(parameters('enablePrivateDnsZonesSecondary'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
                "type": "Microsoft.Resources/deployments",
                "apiVersion": "2020-10-01",
                "name": "[concat(variables('deploymentNames').privateDnsZones2DeploymentName, copyIndex())]",
                "subscriptionId": "[parameters('connectivitySubscriptionId')]",
                "resourceGroup": "[variables('platformRgNames').privateDnsRg2]",
                "dependsOn": [
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsZoneRg2DeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHub2DeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                    "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHub2DeploymentName)]"
                ],
                "copy": {
                    "name": "dnsZones",
                    "count": "[length(variables('privateDnsZonesMergedWithBackupPlaceholderRemoved'))]"
                },
                "properties": {
                    "mode": "Incremental",
                    "templateLink": {
                        "contentVersion": "1.0.0.0",
                        "uri": "[variables('deploymentUris').privateDnsZones]"
                    },
                    "parameters": {
                        "privateDnsZoneName": {
                            "value": "[concat(variables('privateDnsZonesMergedWithBackupPlaceholderRemoved')[copyIndex()])]"
                        },
                        "connectivityHubResourceId": {
                            "value": "[variables('platformResourceIds').vNetHubResourceIdSecondary]"
                        },
                        "connectivityHubResourceIdSecondary": {
                            "value": "placeholder"
                        },
                        "enablePrivateDnsZonesSecondary": {
                            "value": "[parameters('enablePrivateDnsZonesSecondary')]"
                        },
                        "enableHubSecondary": {
                            "value": "No"
                        }
                    }
                }
            },
        /*
            The following optional deployment will configure virtual network hub into the connectivity subscription for a secondary region
        */
        {
            // Creating the virtual network hub (hub and spoke) in a secondary region
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),  equals(parameters('enableSecondaryRegion'), 'Yes'), equals(parameters('enableHubSecondary'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').vnetConnectivityHub2DeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHubSecondary')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFwSecondary')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefixSecondary')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGwSecondary')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGwSecondary')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFwSecondary')]"
                    },
                    "subnetMaskForAzFwMgmt": {
                        "value": "[parameters('subnetMaskForAzFwMgmtSecondary')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGwSecondary')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSkuSecondary')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZonesSecondary')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxySecondary')]"
                    },
                    "enableVpnActiveActive": {
                        "value": "[parameters('enableVpnActiveActiveSecondary')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAzSecondary')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSkuSecondary')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSkuSecondary')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAzSecondary')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSkuSecondary')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSkuSecondary')]"
                    }
                }
            }
        },
        {
            // Creating the virtual network hub (with NVA) in a secondary region
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableSecondaryRegion'), 'Yes'), equals(parameters('enableHubSecondary'), 'nva'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').nvaConnectivityHub2DeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nvaConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHubSecondary')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefixSecondary')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGwSecondary')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGwSecondary')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGwSecondary')]"
                    },
                    "enableVpnActiveActive": {
                        "value": "[parameters('enableVpnActiveActiveSecondary')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAzSecondary')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSkuSecondary')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSkuSecondary')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAzSecondary')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSkuSecondary')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSkuSecondary')]"
                    }
                }
            }
        },
        {
            // Peering the primary hub and the secondary hub (when nva or vhub is selected)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))), or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), or(equals(parameters('enableHubSecondary'), 'nva'), equals(parameters('enableHubSecondary'), 'vhub')), equals(parameters('enableSecondaryRegion'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').hubPeeringDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "location": "[parameters('connectivityLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identityPeeringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identityPeering2DeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').hubVnetPeering]"
                },
                "parameters": {
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "hubResourceIdSecondary": {
                        "value": "[variables('platformResourceIds').vNetHubResourceIdSecondary]"
                    },
                    "hubLocation": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "hubLocationSecondary": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "hubRgName": {
                        "value": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnethub-', parameters('connectivityLocation'))]"
                    },
                    "hubRgNameSecondary": {
                        "value": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnethub-', parameters('connectivityLocationSecondary'))]"                    }
                }
            }
        },
        {
            // Creating route table from first region to second region
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))), equals(parameters('enableHub'), 'vhub'), equals(parameters('enableAzFw'), 'Yes'), equals(parameters('enableAzFwSecondary'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').vnetConnectivityRouteTableDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').connectivityRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsZoneRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHub2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHub2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').hubPeeringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').hubVnetRouting]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "subnetName": {
                        "value": "AzureFirewallSubnet"
                    },
                    "cidrRange": {
                        "value": "[parameters('addressPrefixSecondary')]"
                    },
                    "targetFWSubnetCidr": {
                        "value": "[parameters('subnetMaskForAzFwSecondary')]"
                    },
                    "sourceFWSubnetCidr": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "hubLocation": {
                        "value": "[parameters('connectivityLocation')]"
                    }
                }
            }
        },
        {
            // Creating route table from second region to first region
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))), equals(parameters('enableHub'), 'vhub'), equals(parameters('enableAzFw'), 'Yes'), equals(parameters('enableAzFwSecondary'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').vnetConnectivityRouteTable2DeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').connectivityRgSecondary]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsZoneRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHub2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHub2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').hubPeeringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').hubVnetRouting]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceIdSecondary]"
                    },
                    "subnetName": {
                        "value": "AzureFirewallSubnet"
                    },
                    "cidrRange": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "targetFWSubnetCidr": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "sourceFWSubnetCidr": {
                        "value": "[parameters('subnetMaskForAzFwSecondary')]"
                    },
                    "hubLocation": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    }
                }
            }
        },
        /*
            The following deployments will deploy and configure the Azure policy governance for the landing zones
        */
        {
            // Deploying Private DNS Zones policy assignment for PaaS services using built-in policies
            "condition": "[or(equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes'), equals(parameters('enablePrivateDnsZonesForLzs'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').privateDnsPolicyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]",
                "dnsZones",
                "dnsZonesLite",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZonePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "dnsZoneResourceGroupId": {
                        "value": "[variables('platformResourceIds').privateDnsRgResourceId]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning RBAC for Private DNS Zone Policy assignment to the connectivity hub
            "condition": "[equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').dnsZoneRoleAssignmentDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[variables('singleVsDedicatedConnectivitySub')]",
            "dependsOn": [
                "[variables('deploymentNames').privateDnsPolicyDeploymentName]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').roleAssignments]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "principalId": {
                        "value": "[if(equals(parameters('enablePrivateDnsZonesForLzs'), 'Yes'), reference(variables('deploymentNames').privateDnsPolicyDeploymentName).outputs.principalId.value, 'na')]"
                    },
                    "roleDefinitionId": {
                        "value": "[variables('roleDefinitions').networkContributor]"
                    }
                }
            }
        },
        {
            // Assigning Azure Monitor for VMs policy initiative to platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Audit')), equals(parameters('enableVmInsights'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleVmInsightsDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmMonitorPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleVmInsightsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning Azure Monitor for VMs policy initiative to landing zone management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Audit')), equals(parameters('enableVmInsights'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleVmInsightsDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmMonitorPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleVmInsightsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').lzsManagementGroup]"
                    },
                    "platformScope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning Azure Monitor for VMSS policy initiative to platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmssMonitoring'), 'Yes'), equals(parameters('enableVmssMonitoring'), 'Audit')), equals(parameters('enableVmInsights'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmssMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleVmInsightsDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmssMonitorPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleVmInsightsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning Azure Monitor for VMSS policy initiative to landing zone management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmssMonitoring'), 'Yes'), equals(parameters('enableVmssMonitoring'), 'Audit')), equals(parameters('enableVmInsights'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmssMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleVmInsightsDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmssMonitorPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleVmInsightsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').lzsManagementGroup]"
                    },
                    "platformScope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning Azure Monitor for Arc-enabled VMs policy initiative to platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmHybridMonitoring'), 'Yes'), equals(parameters('enableVmHybridMonitoring'), 'Audit')), equals(parameters('enableVmInsights'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmHybridMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleVmInsightsDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmHybridMonitorPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleVmInsightsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmHybridMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "scope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning Azure Monitor for Arc-enabled VMs policy initiative to landing management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), or(equals(parameters('enableVmHybridMonitoring'), 'Yes'), equals(parameters('enableVmHybridMonitoring'), 'Audit')), equals(parameters('enableVmInsights'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmHybridMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleVmInsightsDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmHybridMonitorPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleVmInsightsResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmHybridMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "scope": {
                        "value": "[variables('scopes').lzsManagementGroup]"
                    },
                    "platformScope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning Azure Update Manager policy to platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableUpdateMgmt'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azureUpdateManagerPolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azureUpdateManagerPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    },
                    "assessmentMode": {
                        "value": "AutomaticByPlatform"
                    },
                    "scope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning Azure Update Manager policy to landing zone management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableUpdateMgmt'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azureUpdateManagerPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azureUpdateManagerPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    },
                    "assessmentMode": {
                        "value": "AutomaticByPlatform"
                    },
                    "scope": {
                        "value": "[variables('scopes').lzsManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning ChangeTracking for VMs policy initiative to platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableChangeTracking'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ChangeTrackingVmDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleChangeTrackingDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ChangeTrackingVmPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleChangeTrackingResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning ChangeTracking for VMs policy initiative to landing zone management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableChangeTracking'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ChangeTrackingVmDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleChangeTrackingDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ChangeTrackingVmPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleChangeTrackingResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').lzsManagementGroup]"
                    },
                    "platformScope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning ChangeTracking for VMSS policy initiative to platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableChangeTracking'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ChangeTrackingVmssDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleChangeTrackingDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ChangeTrackingVmssPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleChangeTrackingResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning ChangeTracking for VMSS policy initiative to landing zone management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableChangeTracking'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ChangeTrackingVmssDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleChangeTrackingDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ChangeTrackingVmssPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleChangeTrackingResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').lzsManagementGroup]"
                    },
                    "platformScope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning ChangeTracking for Hyrbid VMs policy initiative to platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableChangeTracking'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ChangeTrackingVmArcDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleChangeTrackingDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ChangeTrackingVmArcPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleChangeTrackingResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmHybridMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "scope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning ChangeTracking for Hyrbid VMs policy initiative to landing zone management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableChangeTracking'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ChangeTrackingVmArcDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').dataCollectionRuleChangeTrackingDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ChangeTrackingVmArcPolicyAssignment]"
                },
                "parameters": {
                    "dataCollectionRuleResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleChangeTrackingResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmHybridMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "scope": {
                        "value": "[variables('scopes').lzsManagementGroup]"
                    },
                    "platformScope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning MDFC Defender for SQL AMA initiative to platform management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAscForSqlOnVm'), 'DeployIfNotExists'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').MDFCDefenderSqlAmaDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').MDFCDefenderSqlAma]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "userWorkspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "bringYourOwnDcr": {
                        "value": true
                    },
                    "dcrResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleMdfcDefenderSqlResourceId]"
                    },
                    "bringYourOwnUserAssignedManagedIdentity": {
                        "value": true
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning MDFC Defender for SQL AMA initiative to landing zone management group if condition is true
            "condition": "[and(or(not(empty(parameters('managementSubscriptionId'))), not(empty(parameters('singlePlatformSubscriptionId')))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAscForSqlOnVm'), 'DeployIfNotExists'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').MDFCDefenderSqlAmaDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').userAssignedIdentityDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').MDFCDefenderSqlAma]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmMonitoring'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "userWorkspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "bringYourOwnDcr": {
                        "value": true
                    },
                    "dcrResourceId": {
                        "value": "[variables('platformResourceIds').dataCollectionRuleMdfcDefenderSqlResourceId]"
                    },
                    "bringYourOwnUserAssignedManagedIdentity": {
                        "value": true
                    },
                    "userAssignedIdentityResourceId": {
                        "value": "[variables('platformResourceIds').userAssignedIdentityResourceId]"
                    },
                    "scope": {
                        "value": "[variables('scopes').lzsManagementGroup]"
                    },
                    "platformScope": {
                        "value": "[variables('scopes').platformManagementGroup]"
                    }
                }
            }
        },
        {
            // Assigning Azure Backup policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enableVmBackup'), 'Yes'), equals(parameters('enableVmBackup'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azBackupLzPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableVmBackup'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning DDoS Policy to enforce DDoS on virtual networks in landing zones management group if condition evaluates to true
            "condition": "[and(or(equals(parameters('enableLzDdoS'), 'Yes'), equals(parameters('enableLzDdoS'), 'Audit')), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosLzPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosPolicyAssignment]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableLzDdoS'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Aks Priv Escalation policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), equals(parameters('denyAksPrivilegedEscalation'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksPrivEscalationPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksPrivEscalationPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Aks Priviliged policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyAksPrivileged'), 'Yes'), equals(parameters('denyAksPrivileged'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksPrivilegedPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksPrivilegedPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyAksPrivileged'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Https enforcement for AKS policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyHttpIngressForAks'), 'Yes'), equals(parameters('denyHttpIngressForAks'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksHttpsPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksHttpsPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyHttpIngressForAks'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning TLS-SSL policy initiative to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enableEncryptionInTransit'), 'Yes'), equals(parameters('enableEncryptionInTransit'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').tlsSslPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').tlsSslPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableEncryptionInTransit'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning IP Fwd policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyIpForwarding'), 'Yes'),equals(parameters('denyIpForwarding'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ipFwPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ipFwdPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyIpForwarding'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning deny public endpoint initiative to corp connected landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyPublicEndpoints'), 'Yes'),equals(parameters('denyPublicEndpoints'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').publicEndpointPolicyDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').publicEndpointPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyPublicEndpoints'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning deny NIC with Public IP policy to corp connected landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyPipOnNicforCorp'), 'Yes'), equals(parameters('denyPipOnNicforCorp'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').pipOnNicPolicyDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').pipOnNicPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyPipOnNicforCorp'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning deny management ports from internet policy landing zones management group if condition is true
            "condition": "[or(equals(parameters('denyMgmtPorts'), 'Yes'), equals(parameters('denyMgmtPorts'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').mgmtFromInternetPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').mgmtFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyMgmtPorts'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            "condition": "[or(equals(parameters('enablePrivateSubnet'), 'Yes'), equals(parameters('enablePrivateSubnet'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').privateSubnetDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateSubnetPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enablePrivateSubnet'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "effect": {
                        "value": "[if(equals(parameters('enablePrivateSubnet'), 'Yes'), 'Deny', 'Audit')]"
                    }
                }
            }
        },
        {
            "condition": "[or(equals(parameters('enablePrivateSubnet'), 'Yes'), equals(parameters('enablePrivateSubnet'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').privateSubnetDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateSubnetPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enablePrivateSubnet'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    },
                    "effect": {
                        "value": "[if(equals(parameters('enablePrivateSubnet'), 'Yes'), 'Deny', 'Audit')]"
                    }
                }
            }
        },
        {
            // Assigning deny storage without https policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enableStorageHttps'), 'Yes'), equals(parameters('enableStorageHttps'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').storageHttpsPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').storageHttpsPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableStorageHttps'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Key Vault guardrails initiative to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enforceKvGuardrails'), 'Yes'), equals(parameters('enforceKvGuardrails'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').kvGuardrailsPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').kvGuardrailsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enforceKvGuardrails'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Key Vault guardrails initiative to platform management group if condition is true
            "condition": "[or(equals(parameters('enforceKvGuardrailsPlat'), 'Yes'), equals(parameters('enforceKvGuardrailsPlat'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').kvGuardrailsPolicyPlatDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').kvGuardrailsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enforceKvGuardrailsPlat'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Azure Recovery Services - Backup and Site Recovery - guardrails initiative to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enforceBackup'), 'Yes'), equals(parameters('enforceBackup'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').backupPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').backupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enforceBackup'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Azure Recovery Services - Backup and Site Recovery - guardrails initiative to platform management group if condition is true
            "condition": "[or(equals(parameters('enforceBackupPlat'), 'Yes'), equals(parameters('enforceBackupPlat'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').backupPlatPolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').backupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enforceBackupPlat'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning policy to deny deployment of vWAN/ER/VPN Gateways to corp management group if condition is true
            "condition": "[or(equals(parameters('denyHybridNetworking'), 'Yes'), equals(parameters('denyHybridNetworking'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').denyHybridNetworkingPolicyDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').denyHybridNetworkingPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denyHybridNetworking'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning policy to audit deployment of Private Link Private DNS Zones to corp landing zones management group if condition is true
            "condition": "[or(equals(parameters('auditPeDnsZones'), 'Yes'), equals(parameters('auditPeDnsZones'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').auditPeDnsZonesPolicyDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').auditPeDnsZonesPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "privateLinkDnsZones": {
                        "value": "[variables('privateDnsZonesMergedWithBackupPlaceholderRemoved')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('auditPeDnsZones'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning policy to audit deployment of WAF on Application Gateways to landing zones management group if condition is true
            "condition": "[or(equals(parameters('auditAppGwWaf'), 'Yes'), equals(parameters('auditAppGwWaf'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').auditAppGWWafPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').auditAppGwWafPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "[if(equals(parameters('auditAppGwWaf'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning policy to audit Azure Compute Security Baseline compliance to the landing zones management group if condition is true
            "condition": "[or(equals(parameters('enforceACSB'), 'Yes'), equals(parameters('enforceACSB'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').enforceACSBPolicyDeploymentName]",
            "scope": "[variables('scopes').eslzRootManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').enforceACSBPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enforceACSB'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning deny subnet without nsg policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('denySubnetWithoutNsg'), 'Yes'), equals(parameters('denySubnetWithoutNsg'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').subnetNsgPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('denySubnetWithoutNsg'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning sql audit policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enableSqlAudit'), 'Yes'), equals(parameters('enableSqlAudit'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sqlAuditPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sqlAuditPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableSqlAudit'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning Log Analytics Contributor RBAC Role for SQL Auditing Assignment on Management Subscription
            "condition": "[equals(parameters('enableSqlAudit'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').sqlAuditRoleAssignmentDeploymentName1]",
            "location": "[deployment().location]",
            "subscriptionId": "[variables('singleVsDedicatedMgmtSub')]",
            "dependsOn": [
                "[variables('deploymentNames').sqlAuditPolicyDeploymentName]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').roleAssignments]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "principalId": {
                        "value": "[if(equals(parameters('enableSqlAudit'), 'Yes'), reference(variables('deploymentNames').sqlAuditPolicyDeploymentName).outputs.principalId.value, 'na')]"
                    },
                    "roleDefinitionId": {
                        "value": "92aaf0da-9dab-42b6-94a3-d43ce8d16293"
                    }
                }
            }
        },
        {
            // Assigning SQL Security Manager RBAC Role for SQL Auditing Assignment on Management Subscription
            "condition": "[equals(parameters('enableSqlAudit'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').sqlAuditRoleAssignmentDeploymentName2]",
            "location": "[deployment().location]",
            "subscriptionId": "[variables('singleVsDedicatedMgmtSub')]",
            "dependsOn": [
                "[variables('deploymentNames').sqlAuditPolicyDeploymentName]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').roleAssignments]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "principalId": {
                        "value": "[if(equals(parameters('enableSqlAudit'), 'Yes'), reference(variables('deploymentNames').sqlAuditPolicyDeploymentName).outputs.principalId.value, 'na')]"
                    },
                    "roleDefinitionId": {
                        "value": "056cd41c-7e88-42e1-933e-88ba6a50c9c3"
                    }
                }
            }
        },
        {
            // Assigning sql encryption policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enableSqlEncryption'), 'Yes'), equals(parameters('enableSqlEncryption'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sqlEncryptionPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sqlEncryptionPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableSqlEncryption'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning sql threat detection policy to landing zones management group if condition is true
            "condition": "[or(equals(parameters('enableSqlThreat'), 'Yes'), equals(parameters('enableSqlThreat'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sqlThreatPolicyDeploymentName]",
            "scope": "[variables('scopes').lzsManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sqlThreatPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableSqlThreat'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning decommissioned initiative to decommissioned management group if condition is true
            "condition": "[or(equals(parameters('enableDecommissioned'), 'Yes'), equals(parameters('enableDecommissioned'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').decommissionPolicyDeploymentName]",
            "scope": "[variables('scopes').decommissionedManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').decommissionPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableDecommissioned'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        {
            // Assigning sandbox initiative to sandbox management group if condition is true
            "condition": "[or(equals(parameters('enableSandbox'), 'Yes'), equals(parameters('enableSandbox'), 'Audit'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sandboxPolicyDeploymentName]",
            "scope": "[variables('scopes').sandboxManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sandboxPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "[if(equals(parameters('enableSandbox'), 'Yes'), 'Default', 'DoNotEnforce')]"
                    }
                }
            }
        },
        /*
            The following section will optionally configure the governance for the Identity management group for the platform
        */
        {
            // Assigning Azure Backup policy to identity management group if condition is true
            "condition": "[and(equals(parameters('enableVmBackupForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azBackupIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').backupForIdentity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning deny Public Ip policy to identity management group if condition is true
            "condition": "[and(equals(parameters('denyPipForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').pipPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').pipPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning deny subnet without nsg policy to identity management group if condition is true
            "condition": "[and(equals(parameters('denySubnetWithoutNsgForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').subnetNsgIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning deny management ports from internet on identity management group if condition is true
            "condition": "[and(equals(parameters('denyMgmtPortsForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').mgmtFromInternetIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').mgmtFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub if vhub or nva condition is true
            "condition": "[and(or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('identityAddressPrefix'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityPeeringDeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('connectivityLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRg]"
                    },
                    "vNetName": {
                        "value": "[take(concat(variables('platformResourceNames').identityVnet, '-', uniqueString(parameters('identitySubscriptionId'))), 64)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub in a secondary region if vhub or nva condition is true
            "condition": "[and(or(equals(parameters('enableHubSecondary'), 'nva'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('identityAddressPrefixSecondary'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityPeering2DeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('connectivityLocationSecondary')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHub2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHub2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRgSecondary]"
                    },
                    "vNetName": {
                        "value": "[take(concat(variables('platformResourceNames').identityVnetSecondary, '-', uniqueString(parameters('identitySubscriptionId'))), 64)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefixSecondary')]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceIdSecondary]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxySecondary'), 'Yes'), variables('platformResourceIds').azFirewallResourceIdSecondary, '')]"
                    }
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub if vwan condition is true
            "condition": "[and(equals(parameters('enableHub'), 'vwan'), not(empty(parameters('identityAddressPrefix'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityVwanPeeringDeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('connectivityLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVwanPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRg]"
                    },
                    "vNetName": {
                        "value": "[take(concat(variables('platformResourceNames').identityVnet, '-', uniqueString(parameters('identitySubscriptionId'))), 64)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "vWanHubResourceId": {
                        "value": "[variables('platformResourceIds').vWanHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub if vwan condition is true
            "condition": "[and(equals(parameters('enableHubSecondary'), 'vwan'), not(empty(parameters('identityAddressPrefixSecondary'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityVwanPeering2DeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('connectivityLocationSecondary')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHub2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHub2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVwanPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').identityVnetRgSecondary]"
                    },
                    "vNetName": {
                        "value": "[take(concat(variables('platformResourceNames').identityVnetSecondary, '-', uniqueString(parameters('identitySubscriptionId'))), 64)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefixSecondary')]"
                    },
                    "vWanHubResourceId": {
                        "value": "[variables('platformResourceIds').vWanHubResourceIdSecondary]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxySecondary'), 'Yes'), variables('platformResourceIds').azFirewallResourceIdSecondaryVwan, '')]"
                    }
                }
            }
        },
        /*
            The following deployments will place landing zone subscriptions into online/corp (connected or disconnected)
        */
        {
            // Placing subscription(s) into online landing zone management group
            "condition": "[not(empty(parameters('onlineLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').onlineLzSubs, copyIndex())]",
            "scope": "[variables('scopes').onlineManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "copy": {
                "name": "onlineLzs",
                "count": "[length(parameters('onlineLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').online]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('onlineLzSubscriptionId')[copyIndex()])]"
                    }
                }
            }
        },
        {
            // Placing subscriptions into corp landing zone management group
            "condition": "[not(empty(parameters('corpLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').corpLzSubs, copyIndex())]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "copy": {
                "name": "corpLzs",
                "count": "[length(parameters('corpLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').corp]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('corpLzSubscriptionId')[copyIndex()])]"
                    }
                }
            }
        },
        {
            // Placing subscriptions into corp landing zone management group (and do subsequent peering)
            "condition": "[not(empty(parameters('corpConnectedLzSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').corpConnectedMoveLzSubs, copyIndex())]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "copy": {
                "name": "corpConnectedMoveLzs",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').corp]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs]"
                    }
                }
            }
        },
        {
            // Peering corp connected lz vnet to connectivity sub (when nva or vhub is selected)
            "condition": "[and(or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('corpConnectedLzSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('deploymentNames').corpPeeringDeploymentName, copyIndex())]",
            "subscriptionId": "[if(not(empty(parameters('corpConnectedLzSubscriptionId'))), parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '')]",
            "location": "[parameters('connectivityLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "corpConnectedPeering",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').lzVnetRg]"
                    },
                    "vNetName": {
                        "value": "[take(concat(variables('platformResourceNames').lzVnet, '-', parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs), 64)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].addresses]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },
        /*{
            // Peering corp connected lz vnet to connectivity sub (when vwan is selected)
            "condition": "[and(equals(parameters('enableHub'), 'vwan'), not(empty(parameters('corpConnectedLzSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(variables('deploymentNames').corpConnectedLzVwanSubs, copyIndex())]",
            "subscriptionId": "[if(not(empty(parameters('corpConnectedLzSubscriptionId'))), parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs, '')]",
            "location": "[parameters('connectivityLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "corpConnectedMoveLzs"
            ],
            "copy": {
                "name": "corpConnectedVwanPeering",
                "count": "[length(parameters('corpConnectedLzSubscriptionId'))]",
                "batchSize": 1,
                "mode": "Serial"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformRgNames').lzVnetRg]"
                    },
                    "vNetName": {
                        "value": "[take(concat(variables('platformResourceNames').lzVnet, '-', parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs), 64)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('corpConnectedLzSubscriptionId')[copyIndex()].addresses]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vWanHubResourceId]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformResourceIds').azFirewallResourceId, '')]"
                    }
                }
            }
        },*/
        /*
            **ESLZ Lite Only!**
            The following section represent optional deployments in case the user select to use a single dedicated subscription for platform resources.
            This is not recommmended for production deployment, only for small enterprises, demo, POC, etc.

            The following deployment will create the management group structure for ESLZ Lite
        */
        {
            // Creating the ESLZ Lite management group structure
            "condition": "[not(empty(parameters('singlePlatformSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroupsLite]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: the following deployments will organize the dedicated platform subscription into the dedicated management groups
        */
        {
            // Placing Platform subscription into dedicated management group
            "condition": "[not(empty(parameters('singlePlatformSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').mgmtGroupLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('mgmtGroups').platform]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: the following deployment will create Log Analytics to the platform subscription
        */
        {
            // Deploying Log Analytics workspace to platform subscription if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').monitoringLiteDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esliteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    },
                    "enableSentinel": {
                        "value": "[parameters('enableSentinel')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: the following deployment will create Log Analytics to the platform subscription
        */
        {
            // Deploying user assigned identity if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').userAssignedIdentityLiteDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').userAssignedIdentity]"
                },
                "parameters": {
                    "location": {
                        "value": "[deployment().location]"
                    },
                    "userAssignedIdentityName": {
                        "value": "[variables('platformResourceNames').userAssignedIdentity]"
                    },
                    "userAssignedIdentityResourceGroup": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploy Log Analytics workspace policy to the platform management group
        */
        {
            // Assigning Log Analytics workspace policy to platform management group if condition is true
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').logAnalyticsLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logAnalyticsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "rgName": {
                        "value": "[variables('platformRgNames').mgmtRg]"
                    },
                    "logAnalyticsWorkspaceName": {
                        "value": "[variables('platformResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploy RG for DDoS Network Protection to platform subscription
        */
        {
            // Creating resource group for DDoS Network Protection
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').ddosRgLiteDeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').ddosRg]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploy DDoS Network Protection
        */
        {
            // Creating DDoS protection plan into the connectivity subscription
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').ddosLiteDeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').ddosRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosRgLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosProtection]"
                },
                "parameters": {
                    "ddosName": {
                        "value": "[variables('platformResourceNames').ddosName]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploy RG for Private DNS zones to platform subscription
        */
        {
            // Creating resource group for Private DNS Zones
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').privateDnsZoneRgLiteDeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').privateDnsRg]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    }
                }
            }
        },
                /*
            Note: ES Lite only: deploy RG for Private DNS zones to platform subscription in a secondary region
        */
        {
            // Creating resource group for Private DNS Zones for a secondary region
            "condition": "[and(equals(parameters('enablePrivateDnsZonesSecondary'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').privateDnsZoneRgLite2DeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLite2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLite2DeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformRgNames').privateDnsRg2]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    }
                }
            }
        },
         /*
            Note: ES Lite only: deploy private DNS zones for primary region
        */
        {
            // Creating Private DNS Zones into the connectivity subscription for only a primary region, and linking them to the secondary if provided.
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('esLitedeploymentNames').privateDnsZonesLiteDeploymentName, copyIndex())]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').privateDnsRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').privateDnsZoneRgLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLite2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLite2DeploymentName)]"
            ],
            "copy": {
                "name": "dnsZonesLite",
                "count": "[length(variables('privateDnsZonesMergedWithBackupPlaceholderRemoved'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZones]"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[concat(variables('privateDnsZonesMergedWithBackupPlaceholderRemoved')[copyIndex()])]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "connectivityHubResourceIdSecondary": {
                        "value": "[variables('platformResourceIds').vNetHubResourceIdSecondary]"
                    },
                    "enablePrivateDnsZonesSecondary": {
                        "value": "[parameters('enablePrivateDnsZonesSecondary')]"
                    },
                    "enableHubSecondary": {
                        "value": "[parameters('enableSecondaryRegion')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploy private DNS zones in a secondary region
        */
        {
            // Creating Private DNS Zones into the connectivity subscription for a secondary region
            "condition": "[and(equals(parameters('enablePrivateDnsZonesSecondary'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('esLitedeploymentNames').privateDnsZonesLite2DeploymentName, copyIndex())]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').privateDnsRg2]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').privateDnsZoneRgLite2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLite2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLite2DeploymentName)]"
            ],
            "copy": {
                "name": "dnsZonesLite",
                "count": "[length(variables('privateDnsZonesMergedWithBackupPlaceholderRemoved'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZones]"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[concat(variables('privateDnsZonesMergedWithBackupPlaceholderRemoved')[copyIndex()])]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceIdSecondary]"
                    },
                    "connectivityHubResourceIdSecondary": {
                        "value": "placeholder"
                    },
                    "enablePrivateDnsZonesSecondary": {
                        "value": "[parameters('enablePrivateDnsZonesSecondary')]"
                    },
                    "enableHubSecondary": {
                        "value": "No"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: assign DDoS policy for landing zones
        */
        {
            // Assigning DDoS Policy to enforce DDoS on virtual networks if condition evaluates to true
            "condition": "[and(and(equals(parameters('enableDdoS'), 'Yes'), equals(parameters('enableHub'), 'vhub')), not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableHub'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').ddosForConnectivity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys hub and spoke
        */
        {
            // Configuring and deploying the connectivity hub (hub and spoke)
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))),equals(parameters('enableHub'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('scopes').platformManagementGroup]",
            "name": "[variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "subnetMaskForAzFwMgmt": {
                        "value": "[parameters('subnetMaskForAzFwMgmt')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "enableVpnActiveActive": {
                        "value": "[parameters('enableVpnActiveActive')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys virtual hub (NVA)
        */
        {
            // Configuring and deploying the connectivity hub (NVA)
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))),equals(parameters('enableHub'), 'nva'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('scopes').platformManagementGroup]",
            "name": "[variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nvaConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "enableVpnActiveActive": {
                        "value": "[parameters('enableVpnActiveActive')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys VWAN hub (Microsoft Managed)
        */
        {
            // Creating the VWAN network hub (Microsoft managed)
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))),equals(parameters('enableHub'), 'vwan'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').platformManagementGroup]",
            "name": "[variables('esLitedeploymentNames').vwanConnectivityHubLiteDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vwanConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSku')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "expressRouteScaleUnit": {
                        "value": "[parameters('expressRouteScaleUnit')]"
                    },
                    "vpnGateWayScaleUnit": {
                        "value": "[parameters('vpnGateWayScaleUnit')]"
                    },
                    "enablevWANRoutingIntent": {
                        "value": "[parameters('enablevWANRoutingIntent')]"
                    },
                    "internetTrafficRoutingPolicy": {
                        "value": "[parameters('internetTrafficRoutingPolicy')]"
                    },
                    "privateTrafficRoutingPolicy": {
                        "value": "[parameters('privateTrafficRoutingPolicy')]"
                    },
                    "vWANHubRoutingPreference": {
                        "value": "[parameters('vWANHubRoutingPreference')]"
                    },
                    "vWanHubCapacity": {
                        "value": "[parameters('vWANHubCapacity')]"
                    },
                    "enableHubSecondary": {
                        "value": "[parameters('enableHubSecondary')]"
                    },
                    "enableAzFwSecondary": {
                        "value": "[parameters('enableAzFwSecondary')]"
                    },
                    "firewallSkuSecondary": {
                        "value": "[parameters('firewallSkuSecondary')]"
                    },
                    "firewallZonesSecondary": {
                        "value": "[parameters('firewallZonesSecondary')]"
                    },
                    "enableAzFwDnsProxySecondary": {
                        "value": "[parameters('enableAzFwDnsProxySecondary')]"
                    },
                    "addressPrefixSecondary": {
                        "value": "[parameters('addressPrefixSecondary')]"
                    },
                    "enableVpnGwSecondary": {
                        "value": "[parameters('enableVpnGwSecondary')]"
                    },
                    "enableErGwSecondary": {
                        "value": "[parameters('enableErGwSecondary')]"
                    },
                    "locationSecondary": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "expressRouteScaleUnitSecondary": {
                        "value": "[parameters('expressRouteScaleUnitSecondary')]"
                    },
                    "vpnGateWayScaleUnitSecondary": {
                        "value": "[parameters('vpnGateWayScaleUnitSecondary')]"
                    },
                    "enablevWANRoutingIntentSecondary": {
                        "value": "[parameters('enablevWANRoutingIntentSecondary')]"
                    },
                    "internetTrafficRoutingPolicySecondary": {
                        "value": "[parameters('internetTrafficRoutingPolicySecondary')]"
                    },
                    "privateTrafficRoutingPolicySecondary": {
                        "value": "[parameters('privateTrafficRoutingPolicySecondary')]"
                    },
                    "vWANHubRoutingPreferenceSecondary": {
                        "value": "[parameters('vWANHubRoutingPreferenceSecondary')]"
                    },
                    "vWANHubCapacitySecondary": {
                        "value": "[parameters('vWANHubCapacitySecondary')]"
                    }
                }
            }
        },
                /*
            Note: ES Lite only: deploys hub and spoke in a secondary region
        */
        {
            // Configuring and deploying the connectivity hub (hub and spoke) in a secondary region
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableSecondaryRegion'), 'Yes'), equals(parameters('enableHubSecondary'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('scopes').platformManagementGroup]",
            "name": "[variables('esLitedeploymentNames').vnetConnectivityHubLite2DeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHubSecondary')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFwSecondary')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefixSecondary')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGwSecondary')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGwSecondary')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFwSecondary')]"
                    },
                    "subnetMaskForAzFwMgmt": {
                        "value": "[parameters('subnetMaskForAzFwMgmtSecondary')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGwSecondary')]"
                    },
                    "firewallSku": {
                        "value": "[parameters('firewallSkuSecondary')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZonesSecondary')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxySecondary')]"
                    },
                    "enableVpnActiveActive": {
                        "value": "[parameters('enableVpnActiveActiveSecondary')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAzSecondary')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSkuSecondary')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSkuSecondary')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAzSecondary')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSkuSecondary')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSkuSecondary')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys virtual hub (NVA) in a secondary region
        */
        {
            // Configuring and deploying the connectivity hub (NVA) in a secondary region
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableSecondaryRegion'), 'Yes'), equals(parameters('enableHubSecondary'), 'nva'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "scope": "[variables('scopes').platformManagementGroup]",
            "name": "[variables('esLitedeploymentNames').nvaConnectivityHubLite2DeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').ddosHubLitePolicyDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').nvaConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformResourceIds').ddosProtectionResourceId]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHubSecondary')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefixSecondary')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGwSecondary')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGwSecondary')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('singlePlatformSubscriptionId')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGwSecondary')]"
                    },
                    "enableVpnActiveActive": {
                        "value": "[parameters('enableVpnActiveActiveSecondary')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAzSecondary')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSkuSecondary')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSkuSecondary')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAzSecondary')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSkuSecondary')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSkuSecondary')]"
                    }
                }
            }
        },
                /*
            Note: ES Lite only: deploys peering between hub networks in the primary and secondary region
        */
        {
            // Peering the primary hub and the secondary hub (when nva or vhub is selected)
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), or(equals(parameters('enableHub'), 'nva'), equals(parameters('enableHub'), 'vhub')), or(equals(parameters('enableHubSecondary'), 'nva'), equals(parameters('enableHubSecondary'), 'vhub')), equals(parameters('enableSecondaryRegion'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('esLitedeploymentNames').hubPeeringDeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "location": "[parameters('connectivityLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').nvaConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosLzPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascGovPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vwanConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').vnetConnectivityHubLite2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').nvaConnectivityHubLite2DeploymentName)]",
                "corpConnectedMoveLzs"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').hubVnetPeering]"
                },
                "parameters": {
                    "hubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "hubResourceIdSecondary": {
                        "value": "[variables('platformResourceIds').vNetHubResourceIdSecondary]"
                    },
                    "hubLocation": {
                        "value": "[parameters('connectivityLocation')]"
                    },
                    "hubLocationSecondary": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    },
                    "hubRgName": {
                        "value": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnethub-', parameters('connectivityLocation'))]"
                    },
                    "hubRgNameSecondary": {
                        "value": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-vnethub-', parameters('connectivityLocationSecondary'))]"                    }
                }
            }
        },
                        /*
            Note: ES Lite only: deploys route tables to forward traffic between hubs
        */
        {
            // Creating routing from first region to second region
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableHub'), 'vhub'), equals(parameters('enableAzFw'), 'Yes'), equals(parameters('enableAzFwSecondary'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').vnetConnectivityRouteTableDeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').connectivityRg]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').privateDnsZoneRgLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLite2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLite2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').hubPeeringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').hubVnetRouting]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceId]"
                    },
                    "subnetName": {
                        "value": "AzureFirewallSubnet"
                    },
                    "cidrRange": {
                        "value": "[parameters('addressPrefixSecondary')]"
                    },
                    "targetFWSubnetCidr": {
                        "value": "[parameters('subnetMaskForAzFwSecondary')]"
                    },
                    "sourceFWSubnetCidr": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "hubLocation": {
                        "value": "[parameters('connectivityLocation')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys route tables to forward traffic between hubs
        */
        {
            // Creating routing from second region to first region
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableHub'), 'vhub'), equals(parameters('enableAzFw'), 'Yes'), equals(parameters('enableAzFwSecondary'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').vnetConnectivityRouteTable2DeploymentName]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "resourceGroup": "[variables('platformRgNames').connectivityRgSecondary]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').privateDnsZoneRgLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLiteDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').vnetConnectivityHubLite2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').nvaConnectivityHubLite2DeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('esLitedeploymentNames').hubPeeringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').hubVnetRouting]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformResourceIds').vNetHubResourceIdSecondary]"
                    },
                    "subnetName": {
                        "value": "AzureFirewallSubnet"
                    },
                    "cidrRange": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "targetFWSubnetCidr": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "sourceFWSubnetCidr": {
                        "value": "[parameters('subnetMaskForAzFwSecondary')]"
                    },
                    "hubLocation": {
                        "value": "[parameters('connectivityLocationSecondary')]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys Data Collection Rule for VM Insights
        */
        {
            // Deploying Data Collection Rule for VM Insights if condition is true
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmInsights'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').dataCollectionRuleVmInsightsLiteDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').dataCollectionRuleVmInsights]"
                },
                "parameters": {
                    "WorkspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "WorkspaceLocation": {
                        "value": "[deployment().location]"
                    },
                    "userGivenDcrName": {
                        "value": "[variables('platformResourceNames').dataCollectionRuleVmInsights]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys Data Collection Rule for Change Tracking
        */
        {
            // Deploying Data Collection Rule for Change Tracking if condition is true
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableChangeTracking'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').dataCollectionRuleChangeTrackingLiteDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').dataCollectionRuleChangeTracking]"
                },
                "parameters": {
                    "WorkspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "WorkspaceLocation": {
                        "value": "[deployment().location]"
                    },
                    "dataCollectionRuleName": {
                        "value": "[variables('platformResourceNames').dataCollectionRuleChangeTracking]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: deploys Data Collection Rule for Defender for SQL
        */
        {
            // Deploying Data Collection Rule for Mdfc Defender for SQL if condition is true
            "condition": "[and(not(empty(parameters('singlePlatformSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAscForSqlOnVm'), 'DeployIfNotExists'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLiteDeploymentNames').dataCollectionRuleMdfcDefenderSQLLiteDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('singlePlatformSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').monitoringLiteDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').dataCollectionRuleMdfcDefenderSQL]"
                },
                "parameters": {
                    "WorkspaceResourceId": {
                        "value": "[variables('platformResourceIds').logAnalyticsResourceId]"
                    },
                    "WorkspaceLocation": {
                        "value": "[deployment().location]"
                    },
                    "userGivenDcrName": {
                        "value": "[variables('platformResourceNames').dataCollectionRuleMdfcDefenderSql]"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: assigns policy for identity to enable Azure Backup
        */
        {
            // Assigning Azure Backup policy to platform management group if condition is true
            "condition": "[and(equals(parameters('enableVmBackupForIdentity'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').azBackupIdentityLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmBackupPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[variables('deterministicRoleAssignmentGuids').backupForIdentity]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: assign policy for identity to deny subnet without NSG
        */
        {
            // Assigning deny subnet without nsg policy to identity management group if condition is true
            "condition": "[and(equals(parameters('denySubnetWithoutNsgForIdentity'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').subnetNsgIdentityLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        /*
            Note: ES Lite only: assign policy to deny management ports from internet to platform MG
        */
        {
            // Assigning deny management ports from internet policy landing zones management group if condition is true
            "condition": "[and(equals(parameters('denyMgmtPortsForIdentity'), 'Yes'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('esLitedeploymentNames').mgmtFromInternetIdentityLitePolicyDeploymentName]",
            "scope": "[variables('scopes').platformManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('esLiteDeploymentNames').platformLiteSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').mgmtFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "condition": "[equals(parameters('telemetryOptOut'), 'No')]",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').pidCuaDeploymentName]",
            "location": "[deployment().location]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "condition": "[and(equals(parameters('telemetryOptOut'), 'No'), not(empty(parameters('singlePlatformSubscriptionId'))))]",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').pidCuaDeploymentNameSinglePlatformSub]",
            "location": "[deployment().location]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "condition": "[and(equals(parameters('telemetryOptOut'), 'No'), empty(parameters('singlePlatformSubscriptionId')))]",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').pidCuaDeploymentNameMultiPlatformSubs]",
            "location": "[deployment().location]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "condition": "[and(equals(parameters('telemetryOptOut'), 'No'), equals(parameters('enableHub'), 'No'))]",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').pidCuaDeploymentNameNetworkingNone]",
            "location": "[deployment().location]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "condition": "[and(equals(parameters('telemetryOptOut'), 'No'), or(equals(parameters('enableHub'), 'vhub'), equals(parameters('enableHub'), 'nva')))]",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').pidCuaDeploymentNameNetworkingHubSpoke]",
            "location": "[deployment().location]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "condition": "[and(equals(parameters('telemetryOptOut'), 'No'), equals(parameters('enableHub'), 'vwan'))]",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').pidCuaDeploymentNameNetworkingVirtualWan]",
            "location": "[deployment().location]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "condition": "[and(equals(parameters('telemetryOptOut'), 'No'), equals(parameters('enableMonitorBaselines'), 'Yes'))]",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').ambaPortalPidCuaDeploymentName]",
            "location": "[deployment().location]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "condition": "[and(equals(parameters('telemetryOptOut'), 'No'), equals(parameters('enableSecondaryRegion'), 'Yes'))]",
            "apiVersion": "2022-09-01",
            "name": "[variables('deploymentNames').pidCuaDeploymentNameSecondaryRegion]",
            "location": "[deployment().location]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        }
    ],
    "outputs": {
        "deployment": {
            "type": "string",
            "value": "[concat(deployment().name, ' has successfully deployed. Welcome to Azure Landing Zones!')]"
        }
    }
}
