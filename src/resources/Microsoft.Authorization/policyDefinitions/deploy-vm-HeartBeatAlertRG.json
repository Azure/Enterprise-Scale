{
  "type": "Microsoft.Authorization/policyDefinitions",
  "apiVersion": "2021-06-01",
  "name": "Deploy_VM_HeartBeat_Alert",
  "properties": {
    "policyType": "Custom",
    "mode": "Incremental",
    "displayName": "[DINE] Deploy VM HeartBeat Alert",
    "description": "DINE policy to audit/deploy VM HeartBeat Alert",
    "metadata": {
      "version": "1.0.0",
      "Category": "Compute",
      "source": "https://github.com/Azure/ALZ-Monitor/"
    },
    "parameters": {
      "severity": {
        "type": "String",
        "metadata": {
          "displayName": "Severity",
          "description": "Severity of the Alert"
        },
        "allowedValues": [
          "0",
          "1",
          "2",
          "3",
          "4"
        ],
        "defaultValue": "[parameters('parAlertSeverity')]"
      },
      "operator": {
        "type": "String",
        "metadata": {
          "displayName": "Operator"
        },
        "allowedvalues": [
          "Equals",
          "GreaterThan",
          "GreaterThanOrEqual",
          "LessThan",
          "LessThanOrEqual"
        ],
        "defaultvalue": "[parameters('parOperator')]"
      },
      "timeAggregation": {
        "type": "String",
        "metadata": {
          "displayName": "TimeAggregation"
        },
        "allowedValues": [
          "Average",
          "Count",
          "Maximum",
          "Minimum",
          "Total"
        ],
        "defaultvalue": "[parameters('parTimeAggregation')]"
      },
      "windowSize": {
        "type": "String",
        "metadata": {
          "displayName": "Window Size",
          "description": "Window size for the alert"
        },
        "allowedValues": [
          "PT5M",
          "PT15M",
          "PT30M",
          "PT1H",
          "PT6H",
          "PT12H",
          "PT24H"
        ],
        "defaultValue": "[parameters('parWindowSize')]"
      },
      "evaluationFrequency": {
        "type": "String",
        "metadata": {
          "displayName": "Evaluation Frequency",
          "description": "Evaluation frequency for the alert"
        },
        "allowedValues": [
          "PT5M",
          "PT15M",
          "PT30M",
          "PT1H"
        ],
        "defaultValue": "[parameters('parEvaluationFrequency')]"
      },
      "autoMitigate": {
        "type": "String",
        "metadata": {
          "displayName": "Auto Mitigate",
          "description": "Auto Mitigate for the alert"
        },
        "allowedValues": [
          "true",
          "false"
        ],
        "defaultValue": "[parameters('parAutoMitigate')]"
      },
      "autoResolve": {
        "type": "String",
        "metadata": {
          "displayName": "Auto Resolve",
          "description": "Auto Resolve for the alert"
        },
        "allowedValues": [
          "true",
          "false"
        ],
        "defaultValue": "[parameters('parautoResolve')]"
      },
      "autoResolveTime": {
        "type": "String",
        "metadata": {
          "displayName": "Auto Resolve",
          "description": "Auto Resolve time for the alert in ISO 8601 format"
        },
        "defaultValue": "[parameters('parautoResolveTime')]"
      },
      "enabled": {
        "type": "String",
        "metadata": {
          "displayName": "Alert State",
          "description": "Alert state for the alert"
        },
        "allowedValues": [
          "true",
          "false"
        ],
        "defaultValue": "[parameters('parAlertState')]"
      },
      "threshold": {
        "type": "String",
        "metadata": {
          "displayName": "Threshold",
          "description": "Threshold for the alert"
        },
        "defaultValue": "[parameters('parThreshold')]"
      },
      "effect": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "Effect of the policy"
        },
        "allowedValues": [
          "deployIfNotExists",
          "disabled"
        ],
        "defaultValue": "[parameters('parPolicyEffect')]"
      },
      "MonitorDisable": {
        "type": "String",
        "metadata": {
          "displayName": "Effect",
          "description": "Tag name to disable monitoring resource. Set to true if monitoring should be disabled"
        },
        "defaultValue": "[parameters('parMonitorDisable')]"
      }
    },
    "policyRule": {
      "if": {
        "allOf": [
          {
            "field": "type",
            "equals": "Microsoft.Compute/virtualMachines"
          },
          {
            "field": "[[concat('tags[', parameters('MonitorDisable'), ']')]",
            "notEquals": "true"
          }
        ]
      },
      "then": {
        "effect": "[[parameters('effect')]",
        "details": {
          "roleDefinitionIds": "[parameters('deploymentRoleDefinitionIds')]",
          "type": "Microsoft.Insights/scheduledQueryRules",
          "existenceCondition": {
            "allOf": [
              {
                "field": "Microsoft.Insights/scheduledQueryRules/displayName",
                "equals": "[[concat(resourceGroup().name, '-VMHeartBeatAlert')]"
              },
              {
                "field": "Microsoft.Insights/scheduledqueryrules/scopes[*]",
                "equals": "[[concat(subscription().id, '/resourceGroups/', resourceGroup().name)]"
              },
              {
                "field": "Microsoft.Insights/scheduledqueryrules/enabled",
                "equals": "[[parameters('enabled')]"
              }
            ]
          },
          "deployment": {
            "properties": {
              "mode": "incremental",
              "template": {
                "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                "contentVersion": "1.0.0.0",
                "parameters": {
                  "severity": {
                    "type": "String"
                  },
                  "windowSize": {
                    "type": "String"
                  },
                  "evaluationFrequency": {
                    "type": "String"
                  },
                  "autoMitigate": {
                    "type": "String"
                  },
                  "autoResolve": {
                    "type": "String"
                  },
                  "autoResolveTime": {
                    "type": "String"
                  },
                  "enabled": {
                    "type": "String"
                  },
                  "threshold": {
                    "type": "String"
                  },
                  "operator": {
                    "type": "String"
                  },
                  "timeAggregation": {
                    "type": "String"
                  }
                },
                "variables": {},
                "resources": [
                  {
                    "type": "Microsoft.Insights/scheduledQueryRules",
                    "apiVersion": "2022-08-01-preview",
                    "name": "[[concat(resourceGroup().name, '-VMHeartBeatAlert')]",
                    "location": "[[resourceGroup().location]",
                    "properties": {
                      "displayName": "[[concat(resourceGroup().name, '-VMHeartBeatAlert')]",
                      "description": "Log Alert for Virtual Machine Heartbeat",
                      "severity": "[[parameters('severity')]",
                      "enabled": "[[parameters('enabled')]",
                      "scopes": [
                        "[[resourceGroup().Id]"
                      ],
                      "targetResourceTypes": [
                        "Microsoft.Compute/virtualMachines"
                      ],
                      "evaluationFrequency": "[[parameters('evaluationFrequency')]",
                      "windowSize": "[[parameters('windowSize')]",
                      "criteria": {
                        "allOf": [
                          {
                            "query": "Heartbeat| summarize TimeGenerated=max(TimeGenerated) by Computer, _ResourceId| extend Duration = datetime_diff('minute',now(),TimeGenerated)| summarize AggregatedValue = min(Duration) by Computer, bin(TimeGenerated,5m), _ResourceId",
                            "metricMeasureColumn": "AggregatedValue",
                            "threshold": "[[parameters('threshold')]",
                            "operator": "[[parameters('operator')]",
                            "resourceIdColumn": "_ResourceId",
                            "timeAggregation": "[[parameters('timeAggregation')]",
                            "dimensions": [
                              {
                                "name": "Computer",
                                "operator": "Include",
                                "values": [
                                  "*"
                                ]
                              }
                            ],
                            "failingPeriods": {
                              "numberOfEvaluationPeriods": 1,
                              "minFailingPeriodsToAlert": 1
                            }
                          }
                        ]
                      },
                      "autoMitigate": "[[parameters('autoMitigate')]",
                      "ruleResolveConfiguration": {
                        "autoResolved": "[[parameters('autoResolve')]",
                        "timeToResolve": "[[parameters('autoResolveTime')]"
                      },
                      "parameters": {
                        "severity": {
                          "value": "[[parameters('severity')]"
                        },
                        "windowSize": {
                          "value": "[[parameters('windowSize')]"
                        },
                        "evaluationFrequency": {
                          "value": "[[parameters('evaluationFrequency')]"
                        },
                        "autoMitigate": {
                          "value": "[[parameters('autoMitigate')]"
                        },
                        "autoResolve": {
                          "value": "[[parameters('autoResolve')]"
                        },
                        "autoResolveTime": {
                          "value": "[[parameters('autoResolveTime')]"
                        },
                        "enabled": {
                          "value": "[[parameters('enabled')]"
                        },
                        "threshold": {
                          "value": "[[parameters('threshold')]"
                        }
                      }
                    }
                  }
                ]
              },
              "parameters": {
                "severity": {
                  "value": "[[parameters('severity')]"
                },
                "windowSize": {
                  "value": "[[parameters('windowSize')]"
                },
                "evaluationFrequency": {
                  "value": "[[parameters('evaluationFrequency')]"
                },
                "autoMitigate": {
                  "value": "[[parameters('autoMitigate')]"
                },
                "autoResolve": {
                  "value": "[[parameters('autoResolve')]"
                },
                "autoResolveTime": {
                  "value": "[[parameters('autoResolveTime')]"
                },
                "enabled": {
                  "value": "[[parameters('enabled')]"
                },
                "threshold": {
                  "value": "[[parameters('threshold')]"
                },
                "operator": {
                  "value": "[[parameters('operator')]"
                },
                "timeAggregation": {
                  "value": "[[parameters('timeAggregation')]"
                }
              }
            }
          }
        }
      }
    }
  }
}
