---
name: Test Portal Experience

##########################################
# Start the job on push for all branches #
##########################################

# yamllint disable-line rule:truthy
on:
  pull_request:
    types:
      - edited
      - opened
      - reopened
      - synchronize
    paths:
      - "eslzArm/**.json"
      - "src/**.json"
      - "src/**.bicep"
  workflow_dispatch: {}

env:
  GITHUB_COMMIT_ID: ${{ github.event.pull_request.head.sha }}
  GITHUB_PR_ID: ${{ github.event.pull_request.id }}
  TEMP_SUBSCRIPTIONS_JSON_PATH: "./src/data/subscriptions.json"
  TEMP_DEPLOYMENT_OBJECT_PATH: "./src/data/eslzArm.test.deployment.json"

permissions:
  contents: read
  id-token: write

###############
# Set the Job #
###############
jobs:
  test-portal:
    name: Test Portal Experience
    runs-on: ubuntu-latest
    environment: csu-rw

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Show env
        run: env | sort

      - name: Azure login (OIDC)
        uses: azure/login@v1
        if: ${{ success() && env.AZURE_CLIENT_SECRET == '' }}
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Azure login (Client Secret)
        uses: azure/login@v1
        if: ${{ success() && env.AZURE_CLIENT_SECRET != '' }}
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          enable-AzPSSession: true
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Register subscriptions
        uses: azure/powershell@v1
        with:
          inlineScript: |
            ./src/scripts/Invoke-ActionRegisterSubscriptions.ps1
            Get-Content -Path $env:TEMP_SUBSCRIPTIONS_JSON_PATH | jq
          azPSVersion: "latest"
        env:
          BILLING_SCOPE: ${{ secrets.BILLING_SCOPE }}

      - name: Generate eslzArm configuration
        id: config
        uses: azure/powershell@v1
        with:
          inlineScript: |
            ./src/scripts/Invoke-ActionGenerateEslzArmConfig.ps1
            Get-Content -Path $env:TEMP_DEPLOYMENT_OBJECT_PATH | jq
          azPSVersion: "latest"
        env:
          DEPLOYMENT_LOCATION: ${{ secrets.DEPLOYMENT_LOCATION }}

      - name: Test eslzArm deployment
        uses: azure/powershell@v1
        with:
          inlineScript: ./src/scripts/Invoke-ActionRunEslzArmDeployment.ps1 -Test
          azPSVersion: "latest"

      - name: Run eslzArm WhatIf
        uses: azure/powershell@v1
        with:
          inlineScript: ./src/scripts/Invoke-ActionRunEslzArmDeployment.ps1 -WhatIf
          azPSVersion: "latest"

      - name: Run eslzArm deployment
        uses: azure/powershell@v1
        with:
          inlineScript: ./src/scripts/Invoke-ActionRunEslzArmDeployment.ps1
          azPSVersion: "latest"

      - name: Destroy eslzArm deployment
        uses: azure/powershell@v1
        if: ${{ always() }}
        with:
          inlineScript: |
            Import-Module ./src/Alz.Tools/

            Write-Information "Loading Subscription Aliases from : $($env:TEMP_SUBSCRIPTIONS_JSON_PATH)" -InformationAction Continue
            $subscriptions = Get-Content -Path $env:TEMP_SUBSCRIPTIONS_JSON_PATH | ConvertFrom-Json

            Write-Information "Loading deployment config from : $($env:TEMP_DEPLOYMENT_OBJECT_PATH)" -InformationAction Continue
            $deploymentObject = Get-Content -Path $env:TEMP_DEPLOYMENT_OBJECT_PATH | ConvertFrom-Json -AsHashTable

            $rootId = $deploymentObject.Name

            $jobs = @()

            Write-Information "Destroying test deployment [$rootId]..." -InformationAction Continue
            $maxKeyLength = ($subscriptions.name.foreach({$_.Length}) | Measure-Object -Maximum).Maximum
            ($subscriptions | Sort-Object -Property name).foreach({ Write-Information " - Processing Subscription : $($_.name.PadRight($maxKeyLength, ' ')) [$($_.properties.subscriptionId)]" -InformationAction Continue })
            $jobs += Invoke-RemoveRsgByPattern -SubscriptionId $subscriptions.properties.subscriptionId -Like "$rootId-*"
            $jobs += Invoke-RemoveRsgByPattern -SubscriptionId $subscriptions.properties.subscriptionId -Like "NetworkWatcherRG"

            Write-Information " - Processing Management Group : $rootId" -InformationAction Continue
            Invoke-RemoveMgHierarchy -ManagementGroupId $rootId | ForEach-Object { Write-Information "Successfully removed : $_" -InformationAction Continue }

            $jobs | Wait-Job -Timeout 3600
          azPSVersion: "latest"
